#!/usr/bin/env bash
# Optimized pre-commit hook with caching and performance monitoring
# Issues with former version:
#  - Missing shebang caused shell/env inconsistencies on some systems
#  - Didn't source common.sh, so pnpm might not be on PATH (intermittent failures)
#  - Ran full `pnpm test` (triggering build + all tests) on every commit -> slow & flaky
#  - Ignored configured lint-staged pipeline in package.json
#  - Caused nx-smart base detection edge cases (no prior commit) to fall back to full test run

set -euo pipefail

# Source shared env bootstrap (adds PNPM_HOME, node version managers, etc.)
. "$(dirname -- "$0")/common.sh"

# Source hook utilities for caching and performance
. "$(dirname -- "$0")/hook-utils.sh"

# Initialize hook utilities
init_hook_utils "pre-commit"

log_info "Pre-commit: beginning staged file quality checks"

# Collect staged files (Added / Copied / Modified / Renamed) excluding deletions
STAGED_FILES=$(get_staged_files)
if [ -z "$STAGED_FILES" ]; then
  log_info "No staged files – nothing to validate."
  exit 0
fi

# Early check: prevent compiled files from being committed to source directories
log_info "Checking for compiled files in source directories..."
COMPILED_IN_SRC=$(echo "$STAGED_FILES" | grep -E '(/src/.*\.(d\.ts|js|js\.map)$|/src/.*\.d\.ts\.map$)' || true)
if [ -n "$COMPILED_IN_SRC" ]; then
  log_error "Compiled files detected in source directories:"
  echo "$COMPILED_IN_SRC"
  log_error "These build artifacts belong in dist/ directories, not src/"
  log_error "Remove them from src/ and ensure proper build configuration"
  exit 1
fi

JS_TS_CHANGED=$(filter_files_by_extension "$STAGED_FILES" '\.(js|jsx|ts|tsx)$')
PY_CHANGED=$(filter_files_by_extension "$STAGED_FILES" '\.py$')
RUST_CHANGED=$(filter_files_by_extension "$STAGED_FILES" '\.rs$')

#############################
# 1. lint-staged pipeline   #
#############################
if ensure_tool "pnpm" "npm install -g pnpm"; then
  if [ -n "$JS_TS_CHANGED" ]; then
    start_timer "lint-staged"
    if smart_lint_staged; then
      duration=$(end_timer "lint-staged")
      report_performance "lint-staged" "$duration"
    else
      log_error "lint-staged failed"
      exit 1
    fi
  else
    log_info "No JS/TS files staged – skipping lint-staged"
  fi
else
  log_error "pnpm not found after environment bootstrap"
  exit 1
fi

########################################
# 2. Optional quick static validations  #
########################################
# Fast structure guard for changed JS/TS (skip on very large staged sets > 300 files)
CHANGED_COUNT=$(count_files_safe "$STAGED_FILES" 300)
if [ "$CHANGED_COUNT" -le 300 ] && [ -n "$JS_TS_CHANGED" ]; then
  if pnpm run | grep -q '^structure:validate'; then
    start_timer "structure-validate"
    log_info "Running structure:validate on repository (quick boundary check)"
    if pnpm structure:validate; then
      duration=$(end_timer "structure-validate")
      report_performance "structure validation" "$duration"
    else
      log_error "structure:validate failed"
      exit 1
    fi
  fi
else
  log_info "Skipping structure:validate (large change set or no JS/TS changes)"
fi

###########################################
# 2b. TDD Coach staged validation         #
###########################################
if command_exists_timeout "pnpm"; then
  STAGED_ARRAY=()
    while IFS= read -r file; do
      if [ -n "$file" ]; then
        STAGED_ARRAY+=("$file")
      fi
    done <<< "$STAGED_FILES"

    if [ ${#STAGED_ARRAY[@]} -gt 0 ]; then
      log_info "Running TDD Coach validation on staged files"
      TDD_FILES=$(printf '%q ' "${STAGED_ARRAY[@]}")
      if [ -n "${TDD_FILES// /}" ]; then
          if FILES="$TDD_FILES" make tdd-validate; then
              log_ok "TDD Coach validation passed"
          else
              log_error "TDD Coach validation failed"
              exit 1
          fi
      else
          log_info "No staged files detected for TDD Coach validation"
      fi
  else
      log_info "No staged files detected for TDD Coach validation"
  fi
  else
  log_warn "pnpm unavailable - skipping TDD Coach validation"
fi

############################################
# 3. Targeted affected test smoke (fast)  #
############################################
# Strategy:
#  - Only run if JS/TS or Rust domain code changed
#  - Skip if developer sets CORTEX_SKIP_HOOK_TESTS=1
#  - Use nx-smart wrapper (already behind pnpm test:smart)
#  - Pass --passWithNoTests to avoid failures for packages w/o tests

if [ "${CORTEX_SKIP_HOOK_TESTS:-}" = "1" ]; then
  log_info "Skipping tests (CORTEX_SKIP_HOOK_TESTS=1)"
else
  if [ -n "$JS_TS_CHANGED$RUST_CHANGED" ]; then
    start_timer "affected-tests"
    log_info "Running affected test subset (fast)"
    if smart_test_affected "$JS_TS_CHANGED$RUST_CHANGED" 600; then
      duration=$(end_timer "affected-tests")
      report_performance "affected tests" "$duration"
    else
      duration=$(end_timer "affected-tests")
      if [ "$duration" -gt 600 ]; then
        log_warn "Tests timed out after 10m – allowing commit (use pre-push for full validation)"
      else
        log_error "Tests failed"
        exit 1
      fi
    fi
  else
    log_info "No JS/TS/Rust changes – skipping tests"
  fi
fi

################################
# 4. Optional Python lint step #
################################
if [ -n "$PY_CHANGED" ]; then
  start_timer "python-lint"
  if ensure_tool "uv" "curl -LsSf https://astral.sh/uv/install.sh | sh" || ensure_tool "ruff" "pip install ruff"; then
    log_info "Ruff check (staged Python)"
    # Ruff can't target only staged easily without passing file list
    if command_exists_timeout "uv"; then
      if echo "$PY_CHANGED" | xargs -r uv run ruff check; then
        duration=$(end_timer "python-lint")
        report_performance "Python lint" "$duration"
      else
        log_error "Ruff failed"
        exit 1
      fi
    elif command_exists_timeout "ruff"; then
      if echo "$PY_CHANGED" | xargs -r ruff check; then
        duration=$(end_timer "python-lint")
        report_performance "Python lint" "$duration"
      else
        log_error "Ruff failed"
        exit 1
      fi
    fi
  else
    log_info "Python lint tools not installed – skipping Python lint"
  fi
fi

########################################
# 5. AST-Grep brAInwav policy checks  #
########################################
# Soft-fail locally to avoid blocking developers
# CI will enforce these checks strictly
if command -v ast-grep >/dev/null 2>&1; then
  log_info "Running AST-Grep brAInwav policy checks (soft fail)"
  if ! pnpm lint:ast-grep:check; then
    log_warn "AST-Grep violations detected (non-blocking locally). Run 'pnpm lint:ast-grep:fix' to auto-remediate."
  else
    log_ok "AST-Grep policy checks passed"
  fi
else
  log_info "ast-grep not installed – skipping policy checks (install with: cargo install ast-grep)"
fi

#############################################
# 6. Opportunistic memory regression check #
#############################################
# Non-blocking by default. Set CORTEX_MEMORY_BLOCK=1 to enforce.
# Runs a very small snapshot + guard only if baseline + log dir exist.
if [ "${CORTEX_SKIP_MEMORY_PRECOMMIT:-0}" = "1" ]; then
  log_info "Skipping memory quick check (CORTEX_SKIP_MEMORY_PRECOMMIT=1)"
else
  if [ -f reports/memory-baseline.json ]; then
    log_info "Running quick memory snapshot (non-blocking)"
    if pnpm memory:quick >/dev/null 2>&1; then
      if pnpm memory:regression >/dev/null 2>&1; then
        log_info "Memory guard quick PASS"
      else
        if [ "${CORTEX_MEMORY_BLOCK:-0}" = "1" ]; then
          log_error "Memory regression detected (blocking due to CORTEX_MEMORY_BLOCK=1)"
          exit 1
        else
          log_warn "Memory regression detected (non-blocking pre-commit). Review reports/memory-regression-last.json"
        fi
      fi
    else
      log_warn "Quick memory snapshot failed (ignoring in pre-commit)"
    fi
  else
    log_info "No memory baseline present – skip quick memory check"
  fi
fi

# Report overall performance and cleanup
overall_duration=$(end_timer "overall")
report_performance "pre-commit overall" "$overall_duration"
cleanup_hook_utils

log_ok "Pre-commit checks complete"
exit 0
