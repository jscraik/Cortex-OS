[
  {
    "file": "/Users/jamiecraik/.Cortex-OS/packages/memory-core/src/services/GraphRAGService.ts",
    "line": 431,
    "category": "HIGH",
    "description": "CRITICAL: Math.random() used for fake data in production path - violates brAInwav production standards",
    "evidence": "const queryId = `graphrag_${Date.now()}_${Math.random().toString(36).slice(2, 8)}`;",
    "fix": "Replace Math.random() with createPrefixedId() from secure-random.js for unique ID generation",
    "test_suggestion": "Add test to verify unique ID generation without Math.random()"
  },
  {
    "file": "/Users/jamiecraik/.Cortex-OS/packages/memory-core/src/services/GraphRAGService.ts",
    "line": 208,
    "category": "MEDIUM",
    "description": "console.warn missing brAInwav branding prefix - violates brAInwav logging standards",
    "evidence": "console.warn(\n\t\t\t\t'brAInwav GraphRAG external KG is enabled but Neo4j credentials are incomplete; skipping external enrichment.',\n\t\t\t);",
    "fix": "Use structured logging with component, brand, and proper brAInwav branding",
    "test_suggestion": "Add test to verify all logs include brAInwav branding"
  },
  {
    "file": "/Users/jamiecraik/.Cortex-OS/packages/memory-core/src/services/GraphRAGService.ts",
    "line": 208,
    "category": "MEDIUM",
    "description": "Console.warn without structured logging - violates brAInwav observability standards",
    "evidence": "console.warn statement without structured JSON logging",
    "fix": "Replace with structured console.warn containing component, brand, and context",
    "test_suggestion": "Add test to verify structured logging format"
  },
  {
    "file": "/Users/jamiecraik/.Cortex-OS/packages/memory-core/src/services/GraphRAGService.ts",
    "line": 535,
    "category": "MEDIUM",
    "description": "Console.warn missing brAInwav branding prefix",
    "evidence": "console.warn('brAInwav GraphRAG external KG enrichment failed', error);",
    "fix": "Use structured logging with proper brAInwav branding format",
    "test_suggestion": "Add test to verify structured logging format"
  },
  {
    "file": "/Users/jamiecraik/.Cortex-OS/packages/memory-core/src/services/GraphRAGService.ts",
    "line": 593,
    "category": "LOW",
    "description": "Console.log used for event emission - should use structured logging",
    "evidence": "console.log('brAInwav A2A Event:', JSON.stringify(event));",
    "fix": "Use console.info with structured JSON payload for A2A events",
    "test_suggestion": "Add test to verify A2A event logging format"
  },
  {
    "file": "/Users/jamiecraik/.Cortex-OS/packages/agents/src/subagents/ToolLayerAgent.ts",
    "line": 772,
    "category": "MEDIUM",
    "description": "Comment indicates tool execution simulation in production path",
    "evidence": "// Simulate tool execution\n\t\t\t\tconst result = await simulateToolExecution(tool.name, tool.parameters);",
    "fix": "Replace simulation with actual tool execution via MCP clients",
    "test_suggestion": "Add test to verify real tool execution instead of simulation"
  },
  {
    "file": "/Users/jamiecraik/.Cortex-OS/packages/agents/src/subagents/ToolLayerAgent.ts",
    "line": 809,
    "category": "MEDIUM",
    "description": "Tool execution uses mock delay instead of real processing",
    "evidence": "// Simulate tool execution delay\n\t\tawait new Promise((resolve) => setTimeout(resolve, secureDelay(100, 301)));",
    "fix": "Remove artificial delay and implement real tool execution",
    "test_suggestion": "Add test to verify tool execution without artificial delays"
  },
  {
    "file": "/Users/jamiecraik/.Cortex-OS/packages/agents/src/subagents/ToolLayerAgent.ts",
    "line": 820,
    "category": "LOW",
    "description": "Mock metrics generation in tool execution",
    "evidence": "metrics: { cpu: secureRatio() * 100, memory: secureRatio() * 100 },",
    "fix": "Replace mock metrics with real system metrics collection",
    "test_suggestion": "Add test to verify real metrics collection"
  },
  {
    "file": "/Users/jamiecraik/.Cortex-OS/packages/agents/src/subagents/ToolLayerAgent.ts",
    "line": 828,
    "category": "LOW",
    "description": "Mock widget count generation",
    "evidence": "widgets: secureInt(1, 11),",
    "fix": "Replace mock widget count with real dashboard widget counting",
    "test_suggestion": "Add test to verify real widget counting"
  },
  {
    "file": "/Users/jamiecraik/.Cortex-OS/packages/agents/src/langgraph/nodes.ts",
    "line": 208,
    "category": "MEDIUM",
    "description": "Console.error missing brAInwav branding prefix",
    "evidence": "console.error('Agent execution error:', error);",
    "fix": "Use structured console.error with brAInwav branding and context",
    "test_suggestion": "Add test to verify error logging includes brAInwav branding"
  },
  {
    "file": "/Users/jamiecraik/.Cortex-OS/packages/agents/src/langgraph/nodes.ts",
    "line": 411,
    "category": "MEDIUM",
    "description": "Console.log used for interaction storage - should use structured logging",
    "evidence": "console.log('Storing interaction:', interaction);",
    "fix": "Replace with console.info and structured logging format",
    "test_suggestion": "Add test to verify structured interaction logging"
  },
  {
    "file": "/Users/jamiecraik/.Cortex-OS/packages/agents/src/langgraph/nodes.ts",
    "line": 353,
    "category": "LOW",
    "description": "Console.log missing brAInwav branding in tool execution",
    "evidence": "console.log(`Executing tool: ${toolName}`, params);",
    "fix": "Use structured console.log with brAInwav branding",
    "test_suggestion": "Add test to verify tool execution logging includes brAInwav branding"
  },
  {
    "file": "/Users/jamiecraik/.Cortex-OS/packages/memory-core/src/services/external/MCPKnowledgeProvider.ts",
    "line": 111,
    "category": "LOW",
    "description": "Console.warn used but should be console.info for normal operation",
    "evidence": "console.warn('MCP tool returned unsuccessful result', {",
    "fix": "Use console.info for expected unsuccessful results, console.warn for actual issues",
    "test_suggestion": "Add test to verify appropriate log levels"
  },
  {
    "file": "/Users/jamiecraik/.Cortex-OS/packages/memory-core/src/services/external/MCPKnowledgeProvider.ts",
    "line": 125,
    "category": "LOW",
    "description": "Console.error has proper brAInwav branding but could be more specific",
    "evidence": "console.error('MCP citation fetch failed', {",
    "fix": "Add more specific error context and use structured format",
    "test_suggestion": "Add test to verify error context specificity"
  }
]