{
  "issues": [
    {
      "severity": "HIGH",
      "category": "Syntax Error",
      "file": "/Users/jamiecraik/.Cortex-OS/packages/mcp-server/src/context-bridge.ts",
      "line": 204,
      "description": "Unclosed backtick in template literal causing syntax error",
      "evidence": "`=====================================\",",
      "fix": "Change `=====================================\", to `=====================================`,",
      "test_suggestion": "Add unit test to verify context string generation doesn't throw syntax errors"
    },
    {
      "severity": "HIGH",
      "category": "Security",
      "file": "/Users/jamiecraik/.Cortex-OS/packages/memory-core/src/providers/LocalMemoryProvider.ts",
      "line": 570,
      "description": "Mock embeddings forbidden in production but check is insufficient",
      "evidence": "if (process.env.NODE_ENV === 'production') { throw new MemoryProviderError(...); }",
      "fix": "Add stricter validation: const isProduction = process.env.NODE_ENV === 'production' || process.env.BRAINWAV_STRICT === '1';",
      "test_suggestion": "Test mock embedding generation is blocked in both production and strict modes"
    },
    {
      "severity": "HIGH",
      "category": "Policy Violation",
      "file": "/Users/jamiecraik/.Cortex-OS/packages/memory-core/src/providers/LocalMemoryProvider.ts",
      "line": 1227,
      "description": "TODO reference in comment violates brAInwav policy",
      "evidence": "// Provide a runtime-inspectable circuit breaker state without TODOs or placeholders",
      "fix": "Change to: // Provide a runtime-inspectable circuit breaker state",
      "test_suggestion": "Add automated scan to catch TODO/FIXME comments in production paths"
    },
    {
      "severity": "HIGH",
      "category": "Function Length",
      "file": "/Users/jamiecraik/.Cortex-OS/packages/mcp-server/src/tools/hybrid-tools.ts",
      "lines": "96-190",
      "description": "Hybrid search execute function is 94 lines, exceeding 40-line limit",
      "evidence": "async execute(args) function spans 94 lines with complex logic",
      "fix": "Extract separate functions: performLocalSearch(), queryPiecesServices(), combineAndDeduplicateResults()",
      "test_suggestion": "Refactor and test each extracted function independently"
    },
    {
      "severity": "MEDIUM",
      "category": "Type Safety",
      "file": "/Users/jamiecraik/.Cortex-OS/packages/mcp-server/src/tools/hybrid-tools.ts",
      "line": 258,
      "description": "Use of 'any' type reduces type safety",
      "evidence": "const hybridEvent: any = {",
      "fix": "Define proper interface: interface HybridSearchEvent { timestamp: string; query: string; ... }",
      "test_suggestion": "Add TypeScript strict mode and test type checking"
    },
    {
      "severity": "MEDIUM",
      "category": "Type Safety",
      "file": "/Users/jamiecraik/.Cortex-OS/packages/mcp-server/src/tools/hybrid-tools.ts",
      "line": 279,
      "description": "Type casting with 'any' bypasses type checking",
      "evidence": "if ((proxies as any).contextBridge) {",
      "fix": "Extend HybridSearchProxies interface to include optional contextBridge: contextBridge?: PiecesContextBridge;",
      "test_suggestion": "Test with TypeScript strict mode enabled"
    },
    {
      "severity": "MEDIUM",
      "category": "Function Length",
      "file": "/Users/jamiecraik/.Cortex-OS/packages/memory-core/src/providers/LocalMemoryProvider.ts",
      "lines": "687-747",
      "description": "searchWithQdrant function is 60 lines, exceeding 40-line limit",
      "evidence": "Function handles vector search, filtering, and result processing in single block",
      "fix": "Extract: buildQdrantFilter(), processQdrantResults(), mapToMemoryResults()",
      "test_suggestion": "Unit test each extracted function separately"
    },
    {
      "severity": "MEDIUM",
      "category": "Function Length",
      "file": "/Users/jamiecraik/.Cortex-OS/packages/memory-core/src/providers/LocalMemoryProvider.ts",
      "lines": "749-823",
      "description": "searchWithFts function is 74 lines, exceeding 40-line limit",
      "evidence": "Function builds query, applies filters, and processes results",
      "fix": "Extract: buildFtsQuery(), applyFtsFilters(), executeFtsQuery()",
      "test_suggestion": "Test query building and filtering logic separately"
    },
    {
      "severity": "LOW",
      "category": "Best Practices",
      "file": "/Users/jamiecraik/.Cortex-OS/packages/mcp-server/src/tools/hybrid-tools.ts",
      "line": 121,
      "description": "Hardcoded default model name",
      "evidence": "chat_llm: args.chat_llm || 'gpt-4'",
      "fix": "Extract to configuration constant: const DEFAULT_CHAT_MODEL = 'gpt-4';",
      "test_suggestion": "Test with different default model configurations"
    },
    {
      "severity": "LOW",
      "category": "Error Handling",
      "file": "/Users/jamiecraik/.Cortex-OS/packages/mcp-server/src/tools/hybrid-tools.ts",
      "lines": "126-132",
      "description": "Generic error handling could mask specific issues",
      "evidence": "catch (error) { logger.warn(...); }",
      "fix": "Add error categorization: if (error instanceof NetworkError) vs DatabaseError",
      "test_suggestion": "Test error handling with different error types"
    }
  ]
}