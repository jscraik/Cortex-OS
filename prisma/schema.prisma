generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Source {
  id        String     @id @default(cuid())
  kind      String
  url       String?    @db.Text
  createdAt DateTime   @default(now())
  documents Document[]
}

model Document {
  id        String     @id @default(cuid())
  sourceId  String
  source    Source     @relation(fields: [sourceId], references: [id])
  title     String
  mime      String
  sha256    String     @unique
  createdAt DateTime   @default(now())
  chunks    Chunk[]
  evidence  Evidence[]

  @@index([sourceId])
}

model Chunk {
  id         String     @id @default(cuid())
  documentId String
  document   Document   @relation(fields: [documentId], references: [id])
  ord        Int
  text       String     @db.Text
  embedding  Bytes?
  meta       Json?
  evidence   Evidence[]

  @@index([documentId, ord])
}

model Project {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  tasks     Task[]
}

model Task {
  id        String     @id @default(cuid())
  projectId String
  project   Project    @relation(fields: [projectId], references: [id])
  title     String
  status    String     @default("backlog")
  createdAt DateTime   @default(now())
  evidence  Evidence[]

  @@index([projectId])
}

model Evidence {
  id         String   @id @default(cuid())
  taskId     String
  documentId String
  chunkId    String
  start      Int?
  end        Int?
  task       Task     @relation(fields: [taskId], references: [id])
  document   Document @relation(fields: [documentId], references: [id])
  chunk      Chunk    @relation(fields: [chunkId], references: [id])
}

model User {
  id               String               @id @default(cuid())
  email            String               @unique
  emailVerified    Boolean              @default(false)
  emailVerifiedAt  DateTime?
  name             String
  image            String?
  password         String?
  twoFactorEnabled Boolean              @default(false)
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
  sessions         Session[]            @relation("UserSessions")
  accounts         Account[]            @relation("UserAccounts")
  passkeys         PasskeyCredential[]  @relation("UserPasskeys")
  twoFactorSecret  TwoFactorSecret?     @relation("UserTwoFactorSecret")
  auditLogs        AuthAuditLog[]       @relation("UserAuditLogs")
}

model Session {
  id         String        @id @default(cuid())
  userId     String
  token      String        @unique
  ipAddress  String?
  userAgent  String?
  expiresAt  DateTime
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  user       User          @relation("UserSessions", fields: [userId], references: [id], onDelete: Cascade)
  auditLogs  AuthAuditLog[] @relation("SessionAuditLogs")

  @@index([userId])
}

model Account {
  id                 String   @id @default(cuid())
  userId             String
  provider           String
  providerAccountId  String
  credentialHash     String?
  type               String?
  accessToken        String?
  refreshToken       String?
  expiresAt          DateTime?
  scope              String?
  tokenType          String?
  idToken            String?
  sessionState       String?
  oauthTokenSecret   String?
  oauthToken         String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  user               User     @relation("UserAccounts", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  type       String
  expiresAt  DateTime
  createdAt  DateTime @default(now())

  @@index([identifier])
}

model TwoFactorSecret {
  id          String   @id @default(cuid())
  userId      String   @unique
  secret      String
  backupCodes String
  enabled     Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation("UserTwoFactorSecret", fields: [userId], references: [id], onDelete: Cascade)
}

model PasskeyCredential {
  id           String   @id @default(cuid())
  userId       String
  name         String?
  credentialId String   @unique
  publicKey    String
  counter      Int      @default(0)
  deviceType   String
  backedUp     Boolean  @default(false)
  transports   String?
  aaguid       String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation("UserPasskeys", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model AuthAuditLog {
  id            String   @id @default(cuid())
  userId        String?
  sessionId     String?
  action        String
  message       String
  correlationId String?
  traceId       String?
  ipAddress     String?
  metadata      Json?
  createdAt     DateTime @default(now())
  user          User?    @relation("UserAuditLogs", fields: [userId], references: [id], onDelete: SetNull)
  session       Session? @relation("SessionAuditLogs", fields: [sessionId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([sessionId])
}

// GraphRAG Schema Extensions for brAInwav Cortex-OS
// These models enable graph-based knowledge representation
// Compatible with PostgreSQL + LanceDB hybrid architecture

enum GraphNodeType {
  PACKAGE
  SERVICE
  AGENT
  TOOL
  CONTRACT
  EVENT
  DOC
  ADR
  FILE
  API
  PORT
}

enum GraphEdgeType {
  IMPORTS            // FILE|PACKAGE -> FILE|PACKAGE
  IMPLEMENTS_CONTRACT // SERVICE|PACKAGE -> CONTRACT
  CALLS_TOOL         // AGENT|SERVICE -> TOOL
  EMITS_EVENT        // SERVICE|AGENT -> EVENT
  EXPOSES_PORT       // SERVICE -> PORT
  REFERENCES_DOC     // CODE|CONTRACT|SERVICE -> DOC|ADR
  DEPENDS_ON         // PACKAGE|SERVICE -> PACKAGE|SERVICE
  DECIDES_WITH       // ADR -> DOC (rationale/explanation)
}

model GraphNode {
  id        String         @id @default(cuid())
  type      GraphNodeType
  key       String         // stable key e.g., "packages/agent-toolkit", "apps/cortex-os"
  label     String         // human-readable name
  meta      Json?          // flexible metadata storage
  chunks    ChunkRef[]     // links to vector chunks
  outgoing  GraphEdge[]    @relation("outgoingEdges")
  incoming  GraphEdge[]    @relation("incomingEdges")
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  @@unique([type, key])
  @@index([type, key])
  @@index([type])
  @@index([createdAt])
}

model GraphEdge {
  id        String        @id @default(cuid())
  type      GraphEdgeType
  srcId     String        // source node ID
  dstId     String        // destination node ID
  weight    Float?        @default(1.0) // edge strength/confidence
  meta      Json?         // additional edge metadata
  createdAt DateTime      @default(now())

  src       GraphNode     @relation("outgoingEdges", fields: [srcId], references: [id], onDelete: Cascade)
  dst       GraphNode     @relation("incomingEdges", fields: [dstId], references: [id], onDelete: Cascade)

  @@index([srcId, type, dstId])
  @@index([type])
  @@index([srcId])
  @@index([dstId])
  @@index([createdAt])
}

model ChunkRef {
        id        String   @id @default(cuid())
        nodeId    String   // reference to GraphNode
        qdrantId  String   // Qdrant point-id for the chunk (existing collection: local_memory_v1)
        path      String   // repo path of the source file
        lineStart Int?     // starting line number
        lineEnd   Int?     // ending line number
        meta      Json?    // chunk-specific metadata
        createdAt DateTime @default(now())

        node         GraphNode @relation(fields: [nodeId], references: [id], onDelete: Cascade)

        @@index([nodeId])
        @@index([qdrantId])
  @@index([path])
  @@index([createdAt])
  @@unique([nodeId, qdrantId]) // prevent duplicate chunk refs
}
