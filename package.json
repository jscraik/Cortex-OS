{
  "name": "cortex-os",
  "private": true,
  "version": "0.0.1",
  "license": "Apache-2.0",
  "packageManager": "pnpm@10.18.0",
  "engines": {
    "node": ">=20"
  },
  "type": "module",
  "scripts": {
    "setup:deps": "node scripts/install-deps.mjs",
    "check:deps": "node scripts/install-deps.mjs --check",
    "setup:sudo": "zsh scripts/install-with-sudo.sh",
    "prompts:export": "tsx scripts/export-prompts-registry.ts",
    "local-memory:health": "node -e \"fetch(process.env.LOCAL_MEMORY_BASE_URL?.replace(/\\\\\\/$/, '') + '/health').then(r=>console.log('health', r.status)).catch(e=>{console.error('health fail', e.message); process.exit(1);})\"",
    "local-memory:check": "node tools/validators/enforce-local-memory.mjs",
    "ci:agent-toolkit:validate": "bash scripts/ci/agent-toolkit-validate.test.sh",
    "ci:agent-toolkit:validate:legacy": "node scripts/agent-toolkit.mjs validate:project \"**/*.{ts,tsx,js,jsx,py,rs}\"",
    "ci:tools-path:validate": "bash scripts/ci/tools-path-validation.test.sh",
    "toolkit:validate": "node scripts/run-toolkit-validate.mjs",
    "codemap": "python3 scripts/codemap.py --repo . --out out/codemap.json --md out/codemap.md",
    "tdd:watch": "node packages/tdd-coach/dist/cli/tdd-coach.js validate --workspace . --watch",
    "ci:memory:enforce": "bash scripts/ci/memory-enforce.test.sh",
    "ci:memory:enforce:legacy": "node tools/validators/enforce-local-memory.mjs",
    "nx:project:guard": "node tools/validators/nx-project-guard.mjs",
    "nx:project:fix": "node tools/validators/nx-project-guard.mjs --fix",
    "cbom:record": "nx run @cortex-os/cbom:record",
    "cbom:attest": "nx run @cortex-os/cbom:attest",
    "cbom:verify": "nx run @cortex-os/cbom:verify",
    "cbom:export": "nx run @cortex-os/cbom:export",
    "op:build": "pnpm lint:smart && pnpm typecheck:smart && pnpm test placeholders && pnpm test:smart && pnpm build:smart && pnpm cbom:record && pnpm cbom:attest && pnpm cbom:verify",
    "op:build:retry": "pnpm lint:smart:retry && pnpm typecheck:smart:retry && pnpm test placeholders && pnpm test:smart:retry && pnpm build:smart:retry && pnpm cbom:record && pnpm cbom:attest && pnpm cbom:verify",
    "op:build:dry": "node scripts/nx-smart.mjs lint --dry-run && node scripts/nx-smart.mjs typecheck --dry-run && node scripts/nx-smart.mjs test --dry-run && node scripts/nx-smart.mjs build --dry-run",
    "op:build:focus": "bash -lc 'node scripts/nx-smart.mjs lint --focus \"${CORTEX_SMART_FOCUS:-}\" && node scripts/nx-smart.mjs typecheck --focus \"${CORTEX_SMART_FOCUS:-}\" && node scripts/nx-smart.mjs test --focus \"${CORTEX_SMART_FOCUS:-}\" && node scripts/nx-smart.mjs build --focus \"${CORTEX_SMART_FOCUS:-}\"'",
    "op:build:focus:dry": "bash -lc 'node scripts/nx-smart.mjs lint --dry-run --focus \"${CORTEX_SMART_FOCUS:-}\" && node scripts/nx-smart.mjs typecheck --dry-run --focus \"${CORTEX_SMART_FOCUS:-}\" && node scripts/nx-smart.mjs test --dry-run --focus \"${CORTEX_SMART_FOCUS:-}\" && node scripts/nx-smart.mjs build --dry-run --focus \"${CORTEX_SMART_FOCUS:-}\"'",
    "postinstall": "bash -lc 'if [ \"${CI:-}\" != \"true\" ] && [ \"${GITHUB_ACTIONS:-}\" != \"true\" ] && [ \"${CORTEX_EFFICIENCY_SETUP_SKIP:-}\" != \"1\" ] && [ \"${CORTEX_EFFICIENCY_SETUP_SKIP:-}\" != \"true\" ]; then if command -v git >/dev/null 2>&1 && [ -d .git ]; then git config --local core.hooksPath .husky/_ || true; fi; scripts/ensure-efficiency-tools.sh || true; fi'",
    "docs:lint": "markdownlint-cli2 \"README.md\" \"CONTRIBUTING.md\" \"docs/quick-start.md\" \"docs/python-integration.md\" \"docs/architecture-overview.md\" --config .markdownlint-cli2.yaml",
    "lint:md:changed": "bash -lc 'changed=$(git --no-pager diff --name-only | grep -E \\'.md$\\' | sort -u); if [ -n \"$changed\" ]; then echo \"Linting changed markdown files...\"; echo \"$changed\" | xargs -n 50 -I{} sh -c \"markdownlint-cli2 {} --config .markdownlint-cli2.yaml\"; else echo \"No changed markdown files.\"; fi'",
    "docs:lint:all": "markdownlint-cli2 \"README.md\" \"CONTRIBUTING.md\" \"docs/**/*.md\" \"!docs/legacy/**\" \"!docs/archive/**\" \"!**/node_modules/**\" \"!**/CHANGELOG.md\" \"!**/History.md\" \"!**/HISTORY.md\" --config .markdownlint-cli2.yaml",
    "docs:site:start": "cd website && npm start",
    "docs:site:build": "cd website && npm run build",
    "docs:site:serve": "cd website && npm run serve",
    "docs:site:clear": "cd website && npm run clear",
    "ensure:tools": "bash -lc 'scripts/ensure-efficiency-tools.sh'",
    "install:tools": "bash -lc 'scripts/install-efficiency-tools.sh'",
    "readiness:init": "node tools/readiness/generate-readiness-yml.mjs",
    "readiness:precheck:rag": "node tools/readiness/precheck-rag-coverage.mjs",
    "readiness:check": "node tools/readiness/check-readiness.mjs",
    "readiness:gate": "pnpm readiness:precheck:rag && pnpm readiness:check",
    "eval:prompt": "pnpm -s nx run @cortex-os/evals:eval.prompt",
    "eval:redteam": "pnpm -s nx run @cortex-os/evals:eval.redteam",
    "eval:rag": "pnpm -s nx run @cortex-os/evals:eval.rag",
    "eval:ab": "pnpm -s nx run @cortex-os/evals:eval.ab",
    "eval:all": "pnpm -s nx run-many -t eval.prompt,eval.redteam,eval.rag --projects=@cortex-os/evals",
    "archive:docs:dry": "node scripts/maintenance/relocate-files.mjs --dry",
    "archive:docs": "node scripts/maintenance/relocate-files.mjs",
    "pretest": "bash scripts/memory-manager.sh --gentle --dry-run 2>/dev/null || true && pnpm build",
    "premcp": "bash scripts/memory-manager.sh --gentle --dry-run 2>/dev/null || true",
    "prebuild": "bash scripts/memory-manager.sh --gentle --dry-run 2>/dev/null || true",
    "memory:monitor": "bash scripts/memory-monitor.sh",
    "memory:daemon": "bash scripts/memory-monitor.sh daemon",
    "memory:clean": "bash scripts/memory-manager.sh --aggressive",
    "memory:clean:gentle": "bash scripts/memory-manager.sh --gentle",
    "vscode:optimize": "echo 'VS Code optimization disabled for stability'",
    "vscode:optimize:gentle": "echo 'VS Code optimization disabled for stability'",
    "test": "node scripts/nx-smart.mjs test",
    "test:placeholders": "vitest run -c tests/regression/vitest.config.ts",
    "test:smart": "node scripts/nx-smart.mjs test",
    "test:smart:retry": "NX_CLOUD_RETRY_FLAKY_TASKS=true pnpm test:smart",
    "build:smart:retry": "NX_CLOUD_RETRY_FLAKY_TASKS=true pnpm build:smart",
    "lint:smart:retry": "NX_CLOUD_RETRY_FLAKY_TASKS=true pnpm lint:smart",
    "typecheck:smart:retry": "NX_CLOUD_RETRY_FLAKY_TASKS=true pnpm typecheck:smart",
    "test:integration:retry": "NX_CLOUD_RETRY_FLAKY_TASKS=true pnpm test:integration",
    "test:e2e:retry": "NX_CLOUD_RETRY_FLAKY_TASKS=true pnpm test:e2e",
    "test:full": "bash -lc 'NODE_OPTIONS=\"--max-old-space-size=4096\" VITEST_MAX_THREADS=1 VITEST_MIN_THREADS=1 VITEST_MAX_FORKS=1 VITEST_MIN_FORKS=1 vitest run -c tests/vitest.config.ts tests/e2e/full-stack/orchestrated-run.spec.ts tests/e2e/observability.metrics.spec.ts tests/security/todo-banned.spec.ts'",
    "test:safe:vitest": "node scripts/vitest-safe.mjs run",
    "test:watch": "echo 'DISABLED: test:watch can cause pnpm process proliferation. Use test:watch:safe instead.'",
    "test:watch:safe": "cross-env NODE_OPTIONS=\"--max-old-space-size=2048 --expose-gc\" NX_DAEMON=false VITEST_MAX_THREADS=1 VITEST_MIN_THREADS=1 VITEST_MAX_FORKS=1 VITEST_MIN_FORKS=1 vitest --no-coverage --run",
    "test:coverage": "cross-env NODE_OPTIONS=\"--max-old-space-size=4096 --expose-gc\" VITEST_MAX_THREADS=1 VITEST_MIN_THREADS=1 VITEST_MAX_FORKS=1 VITEST_MIN_FORKS=1 vitest run --coverage --coverage.reporter=text-summary --coverage.reporter=json-summary",
    "test:coverage:threshold": "cross-env NODE_OPTIONS=\"--max-old-space-size=4096 --expose-gc\" VITEST_MAX_THREADS=1 VITEST_MIN_THREADS=1 VITEST_MAX_FORKS=1 VITEST_MIN_FORKS=1 vitest run --coverage --coverage.reporter=text-summary --coverage.reporter=json-summary",
    "coverage:baseline": "pnpm test:coverage && mkdir -p reports && cp coverage/coverage-summary.json reports/coverage-baseline.json",
    "coverage:rotation": "node scripts/code-quality/coverage-rotation.mjs",
    "coverage:rotation:ci": "node scripts/code-quality/coverage-rotation.mjs --mode=ci",
    "coverage:rotation:dev": "node scripts/code-quality/coverage-rotation.mjs --mode=dev",
    "coverage:rotation:floor": "node scripts/code-quality/coverage-rotation.mjs --mode=floor",
    "coverage:gate": "pnpm test:coverage && node scripts/code-quality/coverage-diff-gate.mjs",
    "test:safe": "bash -lc 'scripts/test-safe.sh -- --passWithNoTests'",
    "test:safe:watch": "echo 'DISABLED: watch modes cause memory leaks. Use test:safe instead.'",
    "test:safe:monitored": "bash -lc 'scripts/test-safe.sh --monitored -- --passWithNoTests'",
    "test:fuzz": "vitest run -c vitest.fuzz.config.ts",
    "generate:tests": "node scripts/ai-test-generator.mjs",
    "test:policy": "cross-env NODE_OPTIONS=\"--max-old-space-size=4096\" VITEST_MAX_THREADS=2 VITEST_MIN_THREADS=1 VITEST_MAX_FORKS=2 VITEST_MIN_FORKS=1 vitest run -c vitest.policy.config.ts",
    "policy:generate-routing": "node scripts/policies/generate-routing-policy-schema.cjs",
    "test:launch": "cross-env NODE_OPTIONS=\"--max-old-space-size=4096\" VITEST_MAX_THREADS=2 VITEST_MIN_THREADS=1 VITEST_MAX_FORKS=2 VITEST_MIN_FORKS=1 vitest run -c tests/launch-readiness/vitest.config.ts",
    "ci:launch": "cross-env NODE_OPTIONS=\"--max-old-space-size=4096\" vitest run -c vitest.launch.config.ts --reporter=dot",
    "test:gitmcp": "cross-env NODE_OPTIONS=\"--max-old-space-size=4096\" VITEST_MAX_THREADS=2 VITEST_MIN_THREADS=1 VITEST_MAX_FORKS=2 VITEST_MIN_FORKS=1 vitest run -c vitest.gitmcp.config.ts",
    "ci:gitmcp": "pnpm test:gitmcp",
    "ci:release-gate": "bash scripts/release-gate.sh",
    "test:integration": "cross-env NODE_OPTIONS=\"--max-old-space-size=4096\" VITEST_MAX_THREADS=2 VITEST_MIN_THREADS=1 VITEST_MAX_FORKS=2 VITEST_MIN_FORKS=1 vitest run -c vitest.integration.config.ts",
    "test:integration:langgraph": "node scripts/run-langgraph-integration.mjs",
    "test:integration:multi-agent": "cross-env NODE_OPTIONS=\"--max-old-space-size=4096\" VITEST_MAX_THREADS=2 VITEST_MIN_THREADS=1 VITEST_MAX_FORKS=2 VITEST_MIN_FORKS=1 vitest run tests/integration/multi-agent-workflow.test.ts",
    "test:integration:cli": "cross-env NODE_OPTIONS=\"--max-old-space-size=4096\" VITEST_MAX_THREADS=2 VITEST_MIN_THREADS=1 VITEST_MAX_FORKS=2 VITEST_MIN_FORKS=1 vitest run tests/integration/cli-commands.test.ts",
    "test:integration:e2e": "cross-env NODE_OPTIONS=\"--max-old-space-size=4096\" VITEST_MAX_THREADS=2 VITEST_MIN_THREADS=1 VITEST_MAX_FORKS=2 VITEST_MIN_FORKS=1 vitest run tests/integration/end-to-end-scenarios.test.ts",
    "test:integration:security": "cross-env NODE_OPTIONS=\"--max-old-space-size=4096\" VITEST_MAX_THREADS=2 VITEST_MIN_THREADS=1 VITEST_MAX_FORKS=2 VITEST_MIN_FORKS=1 vitest run tests/integration/security-validation.test.ts",
    "test:phase11:dsp": "pnpm --filter @cortex-os/orchestration exec vitest run \"tests/dsp/**/*.test.ts\" \"tests/coordination/adaptive-strategy.test.ts\" \"tests/coordination/structured-planning-integration.test.ts\"",
    "test:phase11:coverage": "pnpm --filter @cortex-os/orchestration test:coverage:dsp",
    "wcag3:assess": "node scripts/wcag3-tracker.mjs assess",
    "wcag3:status": "cat a11y/wcag-roadmap.md",
    "test:security": "pnpm run test:integration:security",
    "test:security:unit": "vitest run tests/security/database-wrapper.unit.test.ts tests/security/neo4j-wrapper.unit.test.ts tests/security/command-executor.unit.test.ts",
    "test:security:integration": "vitest run tests/security/security-wrappers.integration.test.ts",
    "test:security:regression": "vitest run tests/security/security-regression.test.ts",
    "test:security:coverage": "vitest run tests/security/ --coverage",
    "test:security:all": "pnpm run test:security:unit && pnpm run test:security:integration && pnpm run test:security:regression",
    "test:security:ci": "pnpm run test:security:all -- --reporter=dot",
    "security:scan": "cross-env NODE_OPTIONS=\"--max-old-space-size=2048\" semgrep scan --config=.semgrep/owasp-precise.yaml --severity=ERROR . --max-memory=2048 --timeout 180 --max-target-bytes 200MB",
    "security:scan:gitleaks": "bash scripts/security/secret-scan.sh",
    "security:scan:gitleaks:full": "bash scripts/security/secret-scan.sh --full",
    "security:scan:all": "cross-env NODE_OPTIONS=\"--max-old-space-size=2048\" semgrep scan --config=.semgrep/owasp-precise.yaml --config=.semgrep/owasp-top-10-improved.yaml . --max-memory=2048 --timeout 180 --max-target-bytes 200MB",
    "security:scan:llm": "cross-env NODE_OPTIONS=\"--max-old-space-size=2048\" semgrep scan --config=.semgrep/owasp-llm-top-ten.yaml . --max-memory=2048 --timeout 180 --max-target-bytes 200MB",
    "security:scan:atlas": "cross-env NODE_OPTIONS=\"--max-old-space-size=2048\" semgrep scan --config=.semgrep/mitre-atlas.yaml . --max-memory=2048 --timeout 180 --max-target-bytes 200MB",
    "security:scan:ci": "cross-env NODE_OPTIONS=\"--max-old-space-size=2048\" semgrep scan --config=.semgrep/owasp-precise.yaml --severity=ERROR --json --output=reports/semgrep-results.json . --max-memory=2048 --timeout 180 --max-target-bytes 200MB",
    "security:scan:baseline": "cross-env NODE_OPTIONS=\"--max-old-space-size=2048\" semgrep scan --config=.semgrep/owasp-precise.yaml --json --output=reports/semgrep-baseline.json . --max-memory=2048 --timeout 180 --max-target-bytes 200MB",
    "security:scan:local-consistent": "cross-env NODE_OPTIONS=\"--max-old-space-size=2048\" semgrep scan --config=.semgrep/owasp-llm-top-ten.yaml --config=.semgrep/mitre-atlas.yaml . --max-memory=2048 --timeout 180 --max-target-bytes 200MB",
    "security:scan:brainwav": "uv run semgrep --config semgrep/brainwav.yml --error --json --output reports/semgrep-brainwav-results.json",
    "security:scan:brainwav:diff": "uv run semgrep --config semgrep/brainwav.yml --baseline reports/semgrep-brainwav-baseline.json --json --output reports/semgrep-brainwav-current.json || true",
    "security:scan:brainwav:baseline": "uv run semgrep --config semgrep/brainwav.yml --json --output reports/semgrep-brainwav-baseline.json",
    "security:snyk:auth": "snyk auth --quiet || true",
    "security:snyk:deps": "mkdir -p reports && snyk test --all-projects --detection-depth=4 --json-file-output=reports/snyk-deps.json || true",
    "security:snyk:code": "mkdir -p reports && snyk code test --severity-threshold=medium --json-file-output=reports/snyk-code.json || true",
    "security:snyk:iac": "mkdir -p reports && snyk iac test --report --json-file-output=reports/snyk-iac.json || true",
    "security:snyk:monitor": "snyk monitor --all-projects --detection-depth=4 || true",
    "security:snyk:ci": "pnpm security:snyk:auth && pnpm security:snyk:deps && pnpm security:snyk:code && pnpm security:snyk:iac",
    "security:scan:ci:combined": "pnpm security:scan:ci && pnpm security:snyk:ci",
    "security:probely:config": "bash -lc 'mkdir -p ~/.probely && umask 177 && { echo [AUTH]; echo api_key=$PROBELY_API_KEY; } > ~/.probely/config && chmod 600 ~/.probely/config'",
    "security:probely:targets": "probely targets get || echo 'Probely CLI not installed or not authenticated'",
    "security:audit": "pnpm audit --audit-level=high",
    "security:gate": "node scripts/security-gate.mjs",
    "security:gate:strict": "node scripts/security-gate.mjs --strict",
    "security:gate:report": "node scripts/security-gate.mjs --report-only",
    "security:gate:fix": "node scripts/security-gate.mjs --fix",
    "graphite:status": "gt status",
    "graphite:sync": "graphite repo sync",
    "graphite:stack": "graphite stack",
    "graphite:submit": "graphite stack submit",
    "graphite:submit:stack": "graphite stack submit",
    "graphite:branch": "graphite branch create",
    "graphite:restack": "graphite stack restack",
    "graphite:auto": "graphite repo sync && graphite stack restack && graphite stack submit",
    "graphite:dashboard": "graphite dashboard",
    "mermaid:generate": "find . -name '*.mmd' -exec mmdc -i {} -o {}.png \\;",
    "mermaid:docs": "mmdc -i docs/architecture.mmd -o docs/architecture.png",
    "mermaid:workflow": "mmdc -i docs/workflows/workflow-diagram.mmd -o docs/workflows/workflow-diagram.png",
    "mermaid:validate": "find . -name '*.mmd' -exec echo 'Validating {}' \\; -exec mmdc -i {} --dry-run \\;",
    "test:cli-tools": "./scripts/test-cli-tools.sh",
    "demo:comprehensive": "./scripts/comprehensive-demo.sh",
    "security:typecheck": "npx tsc --noEmit --project tsconfig.json",
    "typecheck": "echo '[deprecated] use pnpm typecheck:smart (nx-smart wrapper)' && pnpm typecheck:smart",
    "typecheck:smart": "node scripts/nx-smart.mjs typecheck",
    "security:run": "node scripts/run-security-tests.mjs",
    "mcp:start": "cd packages/mcp && pnpm start",
    "mcp:dev": "cd packages/mcp && pnpm run dev",
    "mcp:build": "cd packages/mcp && pnpm run build",
    "mcp:smoke": "node packages/mcp/scripts/smoke/mcp-smoke.mjs",
    "mcp:test": "packages/mcp/scripts/test-mcp.sh",
    "mcp:start-with-tunnel": "packages/mcp/scripts/start-mcp-with-tunnel.sh",
    "test:mcp:smoke": "cd packages/mcp-bridge && PLAYWRIGHT=1 pnpm test:mcp:smoke",
    "mlx:setup": "bash scripts/mlx-models-setup.sh",
    "lint": "pnpm lint:quality && pnpm lint:security",
    "lint:smart": "node scripts/nx-smart.mjs lint",
    "lint:quality": "eslint \"src/**/*.{js,jsx,ts,tsx}\" \"tests/**/*.{js,jsx,ts,tsx}\" --config=eslint.config.js",
    "lint:security": "eslint \"src/**/*.{js,jsx,ts,tsx}\" \"tests/**/*.{js,jsx,ts,tsx}\" --config=config/eslint-security.config.js",
    "lint:source": "pnpm exec eslint \"apps/**/src/**/*.{ts,tsx,js,jsx}\" \"packages/**/src/**/*.{ts,tsx,js,jsx}\" --config=eslint.config.js",
    "lint:source:report": "mkdir -p reports && pnpm exec eslint \"apps/**/src/**/*.{ts,tsx,js,jsx}\" \"packages/**/src/**/*.{ts,tsx,js,jsx}\" --config=eslint.config.js -f json -o reports/eslint-source.json || true",
    "lint:source:batch": "node scripts/eslint-batch-report.mjs --chunk-size 120 --summary",
    "python:lint": "bash -lc 'if command -v uv >/dev/null 2>&1; then uv run ruff check .; else ruff check .; fi'",
    "lint:ast-grep": "ast-grep scan -c ast-grep/brainwav.yml 'apps|packages|libs' --format=github",
    "lint:ast-grep:fix": "ast-grep scan -c ast-grep/brainwav.yml 'apps|packages|libs' --update-all",
    "lint:ast-grep:check": "ast-grep scan -c ast-grep/brainwav.yml 'apps|packages|libs'",
    "lint:ast-grep:json": "ast-grep scan -c ast-grep/brainwav.yml 'apps|packages|libs' --json",
    "lint:ast-grep:json:out": "bash -lc 'mkdir -p reports && ast-grep scan -c ast-grep/brainwav.yml \"apps|packages|libs\" --json > reports/ast-grep-results.json'",
    "lint:eslint:sarif": "bash -lc 'mkdir -p reports && eslint \"{apps,packages}/**/*.{js,jsx,ts,tsx}\" --config=eslint.config.js -f @microsoft/eslint-formatter-sarif -o reports/eslint.sarif'",
    "lint:ripgrep": "rg --hidden --line-number --color=always --glob '*.{ts,tsx,js,jsx,py,rs,go}' .",
    "lint:ripgrep:todo": "rg --hidden --line-number --glob '*.{ts,tsx,js,jsx,py,rs,go}' -e 'TODO|FIXME|XXX|HACK' --color=always .",
    "lint:ripgrep:console": "rg --hidden --line-number --glob '*.{ts,tsx,js,jsx}' -e 'console\\.(log|warn|error|debug|info)' --color=always .",
    "lint:ripgrep:secrets": "rg --hidden --line-number --glob '*.{ts,tsx,js,jsx,py}' -e 'password|secret|token|key|auth' --color=always -i .",
    "lint:ripgrep:debugger": "rg --hidden --line-number --glob '*.{ts,tsx,js,jsx}' -e 'debugger' --color=always .",
    "lint:ripgrep:magic-numbers": "rg --hidden --line-number --glob '*.{ts,tsx,js,jsx}' -e '\\b\\d{2,}\\b' --color=always .",
    "lint:ripgrep:unused-imports": "rg --hidden --line-number --glob '*.{ts,tsx,js,jsx}' -e '^import.*from' --color=always .",
    "lint:ripgrep:large-files": "find . -name '*.{ts,tsx,js,jsx,py,rs,go}' -exec wc -l {} + | sort -nr | head -10",
    "lint:ripgrep:all": "pnpm lint:ripgrep:todo && pnpm lint:ripgrep:console && pnpm lint:ripgrep:secrets && pnpm lint:ripgrep:debugger",
    "lint:ripgrep:hardened": "bash -lc 'scripts/pattern-guard.sh'",
    "format": "biome format --write .",
    "format:check": "biome check .",
    "biome:staged": "biome check --staged --write --no-errors-on-unmatched --max-diagnostics=none",
    "biome:changed": "biome check --changed --no-errors-on-unmatched --max-diagnostics=none",
    "biome:ci": "biome ci --changed --no-errors-on-unmatched --max-diagnostics=none",
    "build": "echo '[deprecated] use pnpm build:smart (nx-smart wrapper)' && pnpm build:smart",
    "build:smart": "node scripts/nx-smart.mjs build",
    "build:wasm": "./node_modules/.bin/tree-sitter build --wasm node_modules/tree-sitter-javascript -o packages/mvp-core/wasm/tree-sitter-javascript.wasm && ./node_modules/.bin/tree-sitter build --wasm node_modules/tree-sitter-typescript/typescript -o packages/mvp-core/wasm/tree-sitter-typescript.wasm && ./node_modules/.bin/tree-sitter build --wasm node_modules/tree-sitter-python -o packages/mvp-core/wasm/tree-sitter-python.wasm && ./node_modules/.bin/tree-sitter build --wasm node_modules/tree-sitter-go -o packages/mvp-core/wasm/tree-sitter-go.wasm",
    "docs:api": "python scripts/generate-api-docs.py",
    "docs:generate": "tsx scripts/generate-docs.ts",
    "docs:watch": "echo 'DISABLED: chokidar watch causes pnpm memory leaks. Use docs:generate for one-time generation.'",
    "performance:budget": "ANALYZE=true pnpm --filter @brainwav/web build",
    "prepare": "husky",
    "env:load": "./scripts/load-1password-env.sh",
    "env:test": "op run --env-file=.env.1password -- env | grep -E '(OPENAI|GITHUB|SONAR)'",
    "docs:build": "mkdocs build",
    "docs:links": "node scripts/docs-link-check.mjs",
    "docs:serve": "mkdocs serve --dev-addr=0.0.0.0:8000",
    "docs:dev": "mkdocs serve --no-livereload",
    "docs:deploy": "mkdocs gh-deploy --clean --message 'Deploy docs with accessibility and evidence links'",
    "docs:accessibility:validate": "pa11y-ci --sitemap http://localhost:8000/sitemap.xml --standard WCAG2AA",
    "docs:accessibility:audit": "axe-cli http://localhost:8000 --tags wcag2a,wcag2aa --reporter json --output docs/accessibility-audit.json",
    "atlas:assess": "python -m apps.cortex-py.src.security.atlas.atlas_engine",
    "security:unified": "python -m apps.cortex-py.src.security.unified_security",
    "deps:analyze": "node scripts/analyze-dependencies.mjs",
    "deps:check:mcp": "depcruise --config .dependency-cruiser.mcp.cjs packages || (echo 'Dependency violations found' && exit 1)",
    "license:scan": "node scripts/license/license-scanner.mjs",
    "license:validate": "node scripts/license/license-scanner.mjs",
    "sbom:generate": "node scripts/compliance/generate-sbom.mjs",
    "compliance:all": "pnpm license:validate && pnpm sbom:generate",
    "compliance:dashboard": "node scripts/compliance-dashboard.mjs",
    "compliance:monitor": "node scripts/legal-notifications.mjs monitor",
    "compliance:test:notification": "node scripts/legal-notifications.mjs test",
    "compliance:external-scan": "node scripts/external-license-integration.mjs scan",
    "structure:validate": "npx tsx tools/structure-guard/guard-enhanced.ts",
    "test:structure": "node scripts/code-quality/validate-structure.mjs",
    "project:optimize": "pnpm run deps:analyze && pnpm run structure:validate && pnpm run bloat:check",
    "carbon:setup": "./scripts/carbon-monitoring/setup-carbon-monitoring.sh",
    "carbon:build": "./scripts/carbon-monitoring/carbon-aware-build.mjs pnpm run build",
    "carbon:test": "./scripts/carbon-monitoring/carbon-aware-build.mjs pnpm run test",
    "carbon:dashboard": "echo 'Grafana Dashboard: http://localhost:3001 (admin/cortex123)'",
    "test:live": "vitest run --testNamePattern=^(?!\\[RED\\])",
    "test:red": "vitest run --testNamePattern=\\[RED\\]",
    "obs:dashboard:export": "node scripts/observability/export-rag-dashboard.mjs",
    "ci:dashboards": "pnpm obs:dashboard:export",
    "deploy:production": "./scripts/deploy-production.sh",
    "backup:auto": "./scripts/auto-commit.sh",
    "backup:start": "mkdir -p logs && nohup ./scripts/auto-commit.sh > logs/auto-commit.log 2>&1 &",
    "backup:stop": "pkill -f auto-commit.sh",
    "pw:test": "playwright test",
    "pw:report": "playwright show-report",
    "pw:update": "playwright test --update-snapshots",
    "pw:test:debug": "playwright test --debug",
    "pw:test:ui": "playwright test --ui",
    "ci:governance": "bash -lc 'if [ \"${CI_SKIP_MEMORY_GUARD:-0}\" != \"1\" ]; then echo \"[ci:governance] Memory guard enabled\"; pnpm prebuild:graph -- --quiet || true; pnpm memory:snapshot:test || EXIT_CODE=$?; if [ -n \"${EXIT_CODE:-}\" ] && [ \"$EXIT_CODE\" -ne 0 ]; then echo \"Memory snapshot phase failed (code $EXIT_CODE)\"; exit $EXIT_CODE; fi; pnpm memory:regression || exit $?; else echo \"[ci:governance] Skipping memory guard (CI_SKIP_MEMORY_GUARD=$CI_SKIP_MEMORY_GUARD)\"; fi'; pnpm nx:project:guard && pnpm format:check && pnpm lint && pnpm test:security && pnpm structure:validate && pnpm license:validate && pnpm check:cycles && pnpm ci:mcp-path && pnpm ci:agent-toolkit:validate && pnpm ci:memory:enforce",
    "ci:mcp:status": "node tools/validators/mcp-status.mjs",
    "ci:mcp:status:strict": "cross-env MCP_STATUS_STRICT=1 node tools/validators/mcp-status.mjs",
    "ci:agentos:quick": "pnpm ci:governance && pnpm at:validate:project && pnpm ci:memory:enforce",
    "check:cycles": "node scripts/check-circular-deps.mjs",
    "ci:guard:ports": "bash scripts/ci/guard_port_3004.sh",
    "ci:governance:extended": "pnpm ci:governance && pnpm ci:guard:ports",
    "cli:check": "cd apps/cortex-code && cargo run -- ctl validate",
    "tui:preview": "cd apps/cortex-code && cargo run -- tui",
    "tui:preview:plain": "cd apps/cortex-code && cargo run -- tui --theme=plain",
    "tui:preview:rich": "cd apps/cortex-code && cargo run -- tui --theme=rich",
    "tui:dev": "cd apps/cortex-code && cargo watch -x 'run -- tui --theme=plain'",
    "tui:dev:rich": "cd apps/cortex-code && cargo watch -x 'run -- tui --theme=rich'",
    "check:layout": "tsx tools/repo/check-layout.ts --suggest-fix",
    "check:agents-hash": "tsx tools/validators/agents-hash-check.ts",
    "check:pr-prov": "tsx tools/validators/pr-provenance-check.ts",
    "check:a11y-docs": "tsx tools/validators/axe-docs-check.ts",
    "fix:agents-heads": "tsx .cortex/tooling/check-agents.ts",
    "verify:all": "pnpm check:layout && pnpm check:docs && pnpm check:a11y-docs",
    "dev:docker": "./scripts/docker-dev.sh start dev-full",
    "dev:docker:min": "./scripts/docker-dev.sh start dev-min",
    "dev:docker:full": "./scripts/docker-dev.sh start dev-full",
    "dev:docker:web": "./scripts/docker-dev.sh start web",
    "dev:docker:api": "./scripts/docker-dev.sh start api",
    "dev:docker:workers": "./scripts/docker-dev.sh start workers",
    "dev:docker:obs": "./scripts/docker-dev.sh start observability",
    "dev:docker:demo": "./scripts/docker-dev.sh start dev-full,web,observability",
    "dev:docker:down": "./scripts/docker-dev.sh stop",
    "dev:docker:ps": "./scripts/docker-dev.sh status",
    "dev:docker:logs": "./scripts/docker-dev.sh logs",
    "nx:test:core": "pnpm -s nx run-many -t test --projects=@cortex-os/utils,@cortex-os/types,@cortex-os/contracts --parallel=2",
    "nx:test:a2a": "pnpm -s nx run-many -t test --projects=@cortex-os/a2a-core,@cortex-os/a2a-common,@cortex-os/a2a-contracts,@cortex-os/a2a-transport,@cortex-os/a2a-handlers,@cortex-os/a2a-schema-registry,@cortex-os/a2a-observability,a2a --parallel=2",
    "nx:test:mcp": "pnpm -s nx run-many -t test --projects=@cortex-os/registry --parallel=2",
    "nx:test:services": "pnpm -s nx run-many -t test --projects=@cortex-os/policy,@cortex-os/telemetry,@cortex-os/model-gateway,@cortex-os/observability,@cortex-os/orchestration,@cortex-os/gateway,@cortex-os/registry,@cortex-os/memories --parallel=2",
    "nx:test:features": "pnpm -s nx run-many -t test --projects=@cortex-os/mvp-core,@cortex-os/mvp-server,@cortex-os/prp-runner,@cortex-os/agents,@cortex-os/kernel,@cortex-os/simlab,@cortex-os/evals,@cortex-os/rag,asbr,mvp --parallel=2",
    "nx:test:each": "pnpm -s nx show projects --with-target=test --noInteractive | xargs -n 1 -P 3 -I {} pnpm -s nx test {}",
    "nx:test:all:chunked": "pnpm nx:test:core && pnpm nx:test:a2a && pnpm nx:test:mcp && pnpm nx:test:services && pnpm nx:test:features",
    "bootstrap": "corepack enable && pnpm install",
    "biome": "biome",
    "graph": "nx graph",
    "codex:test": "cd apps/cortex-code/codex-rs && cargo test -p mcp-types --all-targets",
    "codex:test:unit": "cd apps/cortex-code/codex-rs && cargo test -p mcp-types --lib",
    "codex:test:integration": "cd apps/cortex-code/codex-rs && cargo test -p mcp-types --tests",
    "codex:test:coverage": "cd apps/cortex-code/codex-rs && cargo llvm-cov --package mcp-types --lcov --output-path target/coverage/lcov.info --html",
    "codex:install:coverage-tools": "bash -lc 'if command -v cargo-llvm-cov >/dev/null 2>&1; then echo cargo-llvm-cov already installed; else cargo install cargo-llvm-cov --locked || echo \"Failed to install cargo-llvm-cov\"; fi'",
    "codex:coverage:xtask": "cd apps/cortex-code && cargo llvm-cov --workspace --lcov --output-path target/coverage/lcov.info --html",
    "codex:coverage:report": "cd apps/cortex-code && cargo llvm-cov --workspace --no-run --lcov --output-path target/coverage/lcov.info --html",
    "codex:doctor": "bash scripts/codex-doctor.sh",
    "cortex-code:test": "cd apps/cortex-code && cargo test --workspace",
    "cortex-code:tui:test-snapshots": "cd apps/cortex-code && RUST_TEST_THREADS=1 cargo test -p codex-tui --lib",
    "mlx:compose:up": "docker compose up -d mlx-embed",
    "mlx:compose:down": "docker compose down",
    "mlx:compose:demo": "docker compose up demo --abort-on-container-exit",
    "demo:serve": "cross-env MEMORIES_EMBEDDER=mlx MLX_EMBED_BASE_URL=http://127.0.0.1:8000 pnpm tsx examples/memories-mlx/server.ts",
    "mlx:verify": "node scripts/mlx/verify.mjs",
    "mlx:verify:py": "python3 scripts/mlx/verify.py",
    "mlx:doctor": "bash -lc 'source .env.local 2>/dev/null || true && node scripts/mlx/doctor.mjs'",
    "at:search": "node scripts/agent-toolkit.mjs search",
    "at:multi": "node scripts/agent-toolkit.mjs multi-search",
    "at:codemod": "node scripts/agent-toolkit.mjs codemod",
    "at:validate": "node scripts/agent-toolkit.mjs validate",
    "at:validate:project": "node scripts/agent-toolkit.mjs validate:project",
    "at:validate:changed": "node scripts/agent-toolkit.mjs validate:changed",
    "dev:no-daemon": "PNPM_HOME_DISABLE_CACHE=true PNPM_DISABLE_PNP=1 PNPM_ENABLE_PREPOST_SCRIPTS=true NX_DAEMON=false pnpm build:smart",
    "memory:budget": "MEMORY_BUDGET_MB=8192 bash scripts/check-memory-budget.sh .memory/*.jsonl 2>/dev/null || echo 'No memory logs found. Run: node scripts/sample-memory.mjs first'",
    "memory:check": "echo 'Process count:' && pnpm pnpm:count && echo 'Memory usage:' && ps -o pid,ppid,rss,vsz,comm -p $(pgrep -f 'pnpm|node' | head -10) 2>/dev/null | head -10 || echo 'No pnpm/node processes found'",
    "install:budget": "bash -lc 'bash scripts/check-memory-budget.sh 32000 85 --pre && pnpm install && bash scripts/check-memory-budget.sh 32000 85 --post'",
    "pnpm:orphan:kill": "bash scripts/kill-orphan-pnpm.sh --grace 5 --max-age 900",
    "node:enforce-version": "bash scripts/enforce-node-version.sh 20",
    "process:snapshot": "bash scripts/process-snapshot.sh > logs/process-snapshot-$(date +%s).txt",
    "pnpm:emergency:kill": "bash scripts/emergency-pnpm-kill.sh",
    "pnpm:count": "ps aux | grep -E '(pnpm|node)' | grep -v grep | wc -l",
    "pnpm:list": "ps aux | grep -E '(pnpm|node)' | grep -v grep | head -20",
    "watch:kill-all": "pkill -f 'tsc.*watch' 2>/dev/null || true && pkill -f 'vitest.*watch' 2>/dev/null || true && pkill -f 'chokidar' 2>/dev/null || true && pkill -f 'mkdocs.*serve' 2>/dev/null || true",
    "nx:reset": "pnpm nx reset && echo 'Nx daemon and cache reset'",
    "dev:single": "NX_DAEMON=false NODE_OPTIONS='--max-old-space-size=2048' pnpm build:smart",
    "mutation:test": "stryker run",
    "mutation:enforce": "stryker run && node scripts/code-quality/enforce-mutation-threshold.mjs",
    "mutation:badges": "stryker run && node scripts/code-quality/generate-badges.mjs",
    "badges:generate": "node scripts/code-quality/generate-badges.mjs",
    "test:badges": "node scripts/code-quality/test-generate-badges.mjs",
    "quality:gate": "node scripts/code-quality/quality-gate-check.mjs",
    "sparkline:inline": "node scripts/code-quality/embed-sparkline.mjs",
    "coverage:branches:record": "pnpm test:coverage && node scripts/code-quality/branch-coverage-history.mjs append",
    "coverage:branches:report": "node scripts/code-quality/branch-coverage-history.mjs report",
    "coverage:branches:enforce": "pnpm test:coverage && node scripts/code-quality/ensure-branch-threshold.mjs",
    "mcp:diagnose": "bash scripts/mcp/mcp_diagnose.sh",
    "ci:mcp:tunnel-validate": "bash scripts/mcp/validate_cloudflare_tunnel.sh",
    "guard:vitest": "node scripts/check-vitest-scripts.mjs",
    "prebuild:graph": "node scripts/prebuild-graph.mjs --target build",
    "memory:snapshot:test": "node scripts/memory-snapshot-runner.mjs --label vitest -- -- node scripts/vitest-safe.mjs run --reporter=dot",
    "memory:regression": "node scripts/memory-regression-guard.mjs --max-mb 1500 --allowed-pct 25",
    "memory:baseline": "node scripts/memory-regression-guard.mjs --max-mb 1500 --allowed-pct 25 || true",
    "memory:quick": "node scripts/memory-snapshot-runner.mjs --interval 1500 --label quick -- -- node scripts/vitest-safe.mjs run --reporter=dot --passWithNoTests --changed --maxTests=20 || true",
    "brainwav:guard": "bash scripts/brainwav-production-guard.sh",
    "test:contracts": "vitest tests/contracts/openapi-sync.spec.ts",
    "test:mcp": "vitest packages/mcp-core/tests/tools-contract.spec.ts",
    "baseline:collect": "ts-node --transpile-only scripts/ci/generate-baseline.ts",
    "baseline:prepare": "ts-node --transpile-only scripts/ci/prepare-baseline.ts",
    "baseline:refresh": "COVERAGE_THRESHOLD_GLOBAL=0 COVERAGE_THRESHOLD_LINES=0 COVERAGE_THRESHOLD_BRANCHES=0 COVERAGE_THRESHOLD_FUNCTIONS=0 VITEST_MAX_THREADS=1 VITEST_MIN_THREADS=1 pnpm test:smart --coverage && pnpm baseline:collect",
    "proofs:verify": "pnpm --filter @cortex-os/proof-artifacts run verify",
    "proofs:sign": "pnpm --filter @cortex-os/proof-artifacts run sign"
  },
  "dependencies": {
    "@anthropic-ai/sdk": "^0.61.0",
    "@frost-beta/clip": "^1.3.1",
    "@lancedb/lancedb": "^0.22.1",
    "@langchain/core": "^0.3.32",
    "@measured/puck": "^0.20.2",
    "@nx/linter": "^19.8.4",
    "@prisma/client": "5.22.0",
    "@qdrant/js-client-rest": "^1.15.1",
    "@rollup/plugin-typescript": "^12.1.4",
    "@testing-library/react": "^16.3.0",
    "@testing-library/user-event": "^14.6.1",
    "@types/pg": "^8.15.5",
    "@types/react": "^19.1.12",
    "@types/react-dom": "^19.1.9",
    "@types/sqlite3": "^5.1.0",
    "axios": "^1.8.0",
    "better-sqlite3": "^12.2.0",
    "chalk": "^5.6.0",
    "chokidar": "^4.0.0",
    "commander": "^13.0.0",
    "crawlee": "^3.15.0",
    "dayjs": "^1.11.18",
    "dotenv": "^16.4.5",
    "eventsource": "^4.0.0",
    "execa": "^9.6.0",
    "express-rate-limit": "^8.1.0",
    "fuse.js": "^7.0.0",
    "inquirer": "^10.0.0",
    "js-tiktoken": "^1.0.21",
    "marked": "^16.3.0",
    "nanoid": "^5.1.5",
    "ora": "^8.0.0",
    "pino": "^10.0.0",
    "react": "^19.1.1",
    "react-dom": "^19.1.1",
    "react-router-dom": "^7.9.2",
    "sonner": "^2.0.7",
    "sqlite3": "^5.1.7",
    "swagger-jsdoc": "^6.2.8",
    "typescript-eslint": "^8.42.0",
    "vite-tsconfig-paths": "^5.1.4",
    "web-tree-sitter": "^0.25.9",
    "winston": "^3.14.2",
    "zod": "^3.25.76"
  },
  "devDependencies": {
    "@axe-core/playwright": "^4.10.1",
    "@biomejs/biome": "2.2.2",
    "@commitlint/cli": "^19.8.1",
    "@commitlint/config-conventional": "^19.8.1",
    "@cortex-os/tdd-coach": "workspace:*",
    "@cyclonedx/bom": "^4.1.0",
    "@esbuild/darwin-arm64": "^0.25.10",
    "@eslint/js": "^9.35.0",
    "@langchain/langgraph": "0.4.9",
    "@microsoft/eslint-formatter-sarif": "^3.1.0",
    "@nx/devkit": "^21.6.3",
    "@nx/docker": "21.6.3",
    "@nx/eslint": "^21.6.3",
    "@nx/js": "^21.6.3",
    "@nx/next": "^21.6.3",
    "@nx/node": "^21.6.3",
    "@nx/playwright": "21.6.3",
    "@nx/react": "^21.6.3",
    "@nx/rollup": "^21.6.3",
    "@nx/vite": "^21.6.3",
    "@nx/workspace": "^21.6.3",
    "@opentelemetry/exporter-prometheus": "0.205.0",
    "@opentelemetry/sdk-node": "0.205.0",
    "@playwright/test": "1.51.1",
    "@stryker-mutator/core": "^8.5.0",
    "@stryker-mutator/typescript-checker": "^8.5.0",
    "@stryker-mutator/vitest-runner": "^8.5.0",
    "@types/better-sqlite3": "^7.6.13",
    "@types/express": "4.17.21",
    "@types/js-yaml": "^4.0.5",
    "@types/micromatch": "^4.0.9",
    "@types/node": "^22.18.1",
    "@types/supertest": "^2.0.16",
    "@types/swagger-jsdoc": "^6.0.4",
    "@types/uuid": "^9.0.8",
    "@types/ws": "^8.18.1",
    "@typescript-eslint/eslint-plugin": "^8.42.0",
    "@typescript-eslint/parser": "^8.42.0",
    "@vitest/coverage-v8": "^3.2.4",
    "ajv": "^8.17.1",
    "ajv-formats": "^3.0.1",
    "bats": "1.12.0",
    "cross-env": "^7.0.3",
    "cyclonedx-bom": "^0.0.9",
    "eslint": "^9.35.0",
    "eslint-plugin-boundaries": "^4.2.2",
    "eslint-plugin-import": "^2.32.0",
    "eslint-plugin-sonarjs": "^3.0.5",
    "express": "4.18.2",
    "fast-glob": "^3.3.3",
    "globals": "^16.4.0",
    "globby": "^14.1.0",
    "husky": "^9.1.7",
    "inversify": "6.0.1",
    "js-yaml": "^4.1.0",
    "lint-staged": "^15.5.2",
    "madge": "^8.0.0",
    "markdownlint": "^0.38.0",
    "markdownlint-cli2": "^0.18.1",
    "micromatch": "^4.0.8",
    "neo4j-driver": "5.28.1",
    "nx": "^21.6.3",
    "nx-cloud": "^19.0.0",
    "prettier": "3.3.3",
    "prisma": "5.22.0",
    "prom-client": "^15.1.3",
    "promptfoo": "^0.44.0",
    "socket.io": "4.8.1",
    "supertest": "^7.1.4",
    "ts-node": "^10.9.2",
    "tsup": "8.5.0",
    "typescript": "^5.9.2",
    "typescript-eslint": "^8.1.0",
    "uuid": "9.0.1",
    "vitest": "^3.2.4",
    "yaml": "^2.8.1"
  },
  "pnpm": {
    "overrides": {
      "cross-spawn": ">=7.0.5",
      "micromatch": ">=4.0.8",
      "esbuild": ">=0.25.0",
      "webpack-dev-server": ">=5.2.1",
      "cookie": ">=0.7.0",
      "tmp": ">=0.2.4",
      "@opentelemetry/api": "1.9.0",
      "@opentelemetry/resources": "2.1.0",
      "@opentelemetry/core": "2.1.0",
      "@opentelemetry/sdk-trace-base": "2.1.0",
      "@opentelemetry/sdk-metrics": "2.1.0",
      "@opentelemetry/sdk-trace-node": "2.1.0",
      "@opentelemetry/exporter-trace-otlp-http": "0.205.0",
      "@opentelemetry/exporter-metrics-otlp-http": "0.205.0",
      "@opentelemetry/exporter-prometheus": "0.205.0",
      "@opentelemetry/sdk-node": "0.205.0",
      "@opentelemetry/auto-instrumentations-node": "0.64.0",
      "express@<4.19.2": ">=4.19.2",
      "body-parser@<1.20.3": ">=1.20.3",
      "send@<0.19.0": ">=0.19.0",
      "serve-static@<1.16.0": ">=1.16.0",
      "express@<4.20.0": ">=4.20.0",
      "path-to-regexp@<0.1.10": ">=0.1.10",
      "path-to-regexp@<0.1.12": ">=0.1.12",
      "axios": ">=1.12.0",
      "tar-fs@>=2.0.0 <2.1.4": ">=2.1.4",
      "tar-fs@>=3.0.0 <3.1.1": ">=3.1.1",
      "webpack-dev-middleware": ">=7.4.5",
      "got": ">=11.8.5",
      "vite": ">=5.4.20",
      "pino": ">=10.0.0",
      "fast-redact": "npm:slow-redact@latest"
    }
  },
  "lint-staged": {
    "**/*.{js,jsx,ts,tsx}": [
      "biome check --write --no-errors-on-unmatched --max-diagnostics=none",
      "ast-grep scan --config sgconfig.json --report-style rich"
    ],
    "**/project.json": [
      "node tools/validators/nx-project-guard.mjs --fix"
    ]
  },
  "optionalDependencies": {
    "pg": "^8.16.3"
  }
}