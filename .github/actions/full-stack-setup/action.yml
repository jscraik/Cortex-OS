name: 'Full Stack Setup'
description: 'Sets up Node.js, pnpm, Python, and Rust with caching'

inputs:
  node-version:
    description: 'Node.js version'
    required: false
    default: '22'
  pnpm-version:
    description: 'pnpm version'
    required: false
    default: '9'
  python-version:
    description: 'Python version (empty to skip Python setup)'
    required: false
    default: ''
  rust:
    description: 'Whether to setup Rust toolchain'
    required: false
    default: 'false'
  uv:
    description: 'Whether to use uv for Python deps (requires python-version)'
    required: false
    default: 'false'
  run-install:
    description: 'Whether to run pnpm install'
    required: false
    default: 'true'
  cache-warm:
    description: 'Whether to warm caches even without install'
    required: false
    default: 'false'
  setup-python:
    description: 'Whether to setup Python (alternative to python-version)'
    required: false
    default: ''
  setup-rust:
    description: 'Whether to setup Rust (alternative to rust)'
    required: false
    default: ''

outputs:
  pnpm-cache-hit:
    description: 'Whether pnpm cache was restored'
    value: ${{ steps.pnpm-cache.outputs.cache-hit }}
  python-cache-hit:
    description: 'Whether Python cache was restored (if Python enabled)'
    value: ${{ steps.python-cache.outputs.cache-hit }}

runs:
  using: 'composite'
  steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # Node.js + pnpm setup with caching
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node-version }}
        cache: 'pnpm'

    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: ${{ inputs.pnpm-version }}

    - name: Derive pnpm store path
      id: pnpm-store
      shell: bash
      run: echo "path=$(pnpm store path --silent)" >> $GITHUB_OUTPUT

    - name: Cache pnpm store
      id: pnpm-cache
      uses: actions/cache@v4
      with:
        path: ${{ steps.pnpm-store.outputs.path }}
        key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-

    - name: Install Node dependencies
      if: inputs.run-install == 'true' || inputs.cache-warm == 'true'
      shell: bash
      run: |
        if [ "${{ inputs.run-install }}" = "true" ]; then
          pnpm install --frozen-lockfile
        else
          # Cache warming: fetch without install
          pnpm fetch --frozen-lockfile || true
        fi

    # Python setup (conditional) - support both python-version and setup-python inputs
    - name: Setup Python
      if: inputs.python-version != '' || inputs.setup-python == 'true'
      uses: actions/setup-python@v5
      with:
        python-version: ${{ inputs.python-version || '3.11' }}

    - name: Cache Python dependencies
      if: inputs.python-version != '' || inputs.setup-python == 'true'
      id: python-cache
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/pip
          ~/.cache/uv
          .venv
        key: ${{ runner.os }}-python-${{ inputs.python-version || '3.11' }}-${{ hashFiles('**/pyproject.toml', '**/uv.lock', '**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-python-${{ inputs.python-version || '3.11' }}-

    - name: Setup uv (fast Python package manager)
      if: (inputs.python-version != '' || inputs.setup-python == 'true') && inputs.uv == 'true'
      shell: bash
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH

    - name: Install Python dependencies
      if: (inputs.python-version != '' || inputs.setup-python == 'true') && (inputs.run-install == 'true' || inputs.cache-warm == 'true')
      shell: bash
      run: |
        if [ "${{ inputs.uv }}" = "true" ]; then
          if [ "${{ inputs.run-install }}" = "true" ]; then
            uv sync
          else
            # Cache warming for uv
            uv lock --locked || true
          fi
        else
          if [ "${{ inputs.run-install }}" = "true" ]; then
            python -m pip install --upgrade pip
            if [ -f pyproject.toml ]; then
              pip install -e .
            elif [ -f requirements.txt ]; then
              pip install -r requirements.txt
            fi
          fi
        fi

    # Rust setup (conditional) - support both rust and setup-rust inputs
    - name: Setup Rust
      if: inputs.rust == 'true' || inputs.setup-rust == 'true'
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Rust dependencies
      if: inputs.rust == 'true' || inputs.setup-rust == 'true'
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock', '**/Cargo.toml') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
