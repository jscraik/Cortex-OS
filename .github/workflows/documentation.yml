name: Automated Documentation

on:
  push:
    branches: [main, develop]
    paths:
      - 'apps/**/*.ts'
      - 'packages/**/*.ts'
      - 'libs/**/*.ts'
      - 'docs/**/*.md'
      - 'apps/**/*.py'
      - 'packages/**/*.py'
  pull_request:
    branches: [main, develop]
    paths:
      - 'apps/**/*.ts'
      - 'packages/**/*.ts'
      - 'libs/**/*.ts'
      - 'docs/**/*.md'
      - 'apps/**/*.py'
      - 'packages/**/*.py'
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  generate-diagrams:
    name: Generate Architecture Diagrams
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Mermaid CLI
        run: npm install -g @mermaid-js/mermaid-cli

      - name: Generate system architecture diagram
        run: |
          mkdir -p docs/diagrams/generated

          # Generate system overview diagram
          cat > docs/diagrams/generated/system-overview.mmd << 'EOF'
          graph TB
              %% Cortex-OS System Architecture

              subgraph "ASBR Runtime"
                  ASBR[ASBR Core]
                  CLI[Cortex CLI]
                  HTTP[HTTP API]
                  WEB[Web UI]
              end

              subgraph "Feature Packages"
                  AGENTS[Agents Package]
                  MVP[MVP Package]
                  PLAN[Planner Package]
                  EVID[Evidence Package]
              end

              subgraph "Shared Services"
                  A2A[A2A Bus]
                  MCP[MCP Bridge]
                  MEM[Memories]
                  ORCH[Orchestration]
                  RAG[RAG Service]
                  SIMLAB[Simulation Lab]
              end

              subgraph "External"
                  MARKET[Marketplace]
                  LLM[LLM Providers]
                  TOOLS[External Tools]
              end

              %% Connections
              CLI --> ASBR
              HTTP --> ASBR
              WEB --> ASBR

              ASBR --> AGENTS
              ASBR --> MVP
              ASBR --> PLAN
              ASBR --> EVID

              AGENTS --> A2A
              MVP --> A2A
              PLAN --> A2A
              EVID --> A2A

              A2A --> ORCH
              MCP --> TOOLS
              ORCH --> MEM
              ORCH --> RAG

              AGENTS --> MCP
              PLAN --> SIMLAB

              MCP --> MARKET
              AGENTS --> LLM

              classDef runtime fill:#e1f5fe
              classDef feature fill:#f3e5f5
              classDef service fill:#e8f5e8
              classDef external fill:#fff3e0

              class ASBR,CLI,HTTP,WEB runtime
              class AGENTS,MVP,PLAN,EVID feature
              class A2A,MCP,MEM,ORCH,RAG,SIMLAB service
              class MARKET,LLM,TOOLS external
          EOF

      - name: Generate component interaction diagram
        run: |
          cat > docs/diagrams/generated/component-interactions.mmd << 'EOF'
          sequenceDiagram
              participant CLI as Cortex CLI
              participant ASBR as ASBR Runtime
              participant A2A as A2A Bus
              participant AGENT as Agent Package
              participant MCP as MCP Bridge
              participant ORCH as Orchestration
              participant EXT as External Tools

              CLI->>ASBR: Command Request
              ASBR->>AGENT: Mount Feature Package
              AGENT->>A2A: Publish Event
              A2A->>ORCH: Route Message
              ORCH->>MCP: Request Tool Access
              MCP->>EXT: Execute Tool
              EXT-->>MCP: Tool Response
              MCP-->>ORCH: Tool Result
              ORCH->>A2A: Publish Result
              A2A->>AGENT: Deliver Result
              AGENT-->>ASBR: Processing Complete
              ASBR-->>CLI: Response
          EOF

      - name: Generate data flow diagram
        run: |
          cat > docs/diagrams/generated/data-flow.mmd << 'EOF'
          flowchart LR
              subgraph "Input Layer"
                  USER[User Input]
                  API[API Requests]
                  SCHED[Scheduled Tasks]
              end

              subgraph "Processing Layer"
                  ASBR[ASBR Runtime]
                  VALID[Input Validation]
                  ROUTE[Request Routing]
              end

              subgraph "Business Logic"
                  AGENT[Agent Execution]
                  WORK[Workflow Engine]
                  PROC[Data Processing]
              end

              subgraph "Integration Layer"
                  A2A[Event Bus]
                  MCP[Tool Bridge]
                  API_INT[API Integrations]
              end

              subgraph "Storage Layer"
                  MEM[Memory Store]
                  CACHE[Cache Layer]
                  FILES[File System]
              end

              subgraph "Output Layer"
                  RESP[API Response]
                  NOTIFY[Notifications]
                  EXPORT[Data Export]
              end

              USER --> ASBR
              API --> ASBR
              SCHED --> ASBR

              ASBR --> VALID
              VALID --> ROUTE
              ROUTE --> AGENT

              AGENT --> WORK
              WORK --> PROC
              PROC --> A2A

              A2A --> MCP
              MCP --> API_INT

              AGENT --> MEM
              PROC --> CACHE
              MCP --> FILES

              WORK --> RESP
              AGENT --> NOTIFY
              PROC --> EXPORT

              classDef input fill:#e3f2fd
              classDef process fill:#f1f8e9
              classDef business fill:#fff3e0
              classDef integration fill:#fce4ec
              classDef storage fill:#f3e5f5
              classDef output fill:#e8f5e8

              class USER,API,SCHED input
              class ASBR,VALID,ROUTE process
              class AGENT,WORK,PROC business
              class A2A,MCP,API_INT integration
              class MEM,CACHE,FILES storage
              class RESP,NOTIFY,EXPORT output
          EOF

      - name: Convert Mermaid diagrams to SVG
        run: |
          mmdc -i docs/diagrams/generated/system-overview.mmd -o docs/diagrams/generated/system-overview.svg -t dark -b transparent
          mmdc -i docs/diagrams/generated/component-interactions.mmd -o docs/diagrams/generated/component-interactions.svg -t dark -b transparent
          mmdc -i docs/diagrams/generated/data-flow.mmd -o docs/diagrams/generated/data-flow.svg -t dark -b transparent

      - name: Update documentation index
        run: |
          cat > docs/diagrams/README.md << 'EOF'
          # Architecture Diagrams

          This directory contains automatically generated diagrams for the Cortex-OS system architecture.

          ## System Overview

          ![System Overview](generated/system-overview.svg)

          The system overview shows the high-level architecture including:
          - **ASBR Runtime**: Core coordination layer with CLI, HTTP API, and Web UI
          - **Feature Packages**: Domain-specific logic (agents, MVP, planner, evidence)
          - **Shared Services**: Cross-cutting concerns (A2A bus, MCP bridge, memories, orchestration)
          - **External Integrations**: Marketplace, LLM providers, external tools

          ## Component Interactions

          ![Component Interactions](generated/component-interactions.svg)

          The sequence diagram illustrates how components interact during request processing:
          1. CLI sends command to ASBR Runtime
          2. ASBR mounts appropriate feature packages
          3. Features communicate via A2A event bus
          4. Orchestration coordinates multi-step workflows
          5. MCP bridge provides access to external tools

          ## Data Flow

          ![Data Flow](generated/data-flow.svg)

          The data flow diagram shows how information moves through the system:
          - **Input Layer**: User inputs, API requests, scheduled tasks
          - **Processing Layer**: Validation, routing, and request handling
          - **Business Logic**: Agent execution, workflow engine, data processing
          - **Integration Layer**: Event bus, tool bridge, API integrations
          - **Storage Layer**: Memory store, cache, file system
          - **Output Layer**: Responses, notifications, data export

          ## Automatic Updates

          These diagrams are automatically updated when code changes are detected in:
          - TypeScript files in `apps/`, `packages/`, `libs/`
          - Python files in `apps/`, `packages/`
          - Documentation files in `docs/`

          Last updated: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          EOF

      - name: Generate dependency graph
        run: |
          # Generate package dependency visualization
          pnpm exec nx graph --file=docs/diagrams/generated/dependency-graph.html --focus=cortex-os

      - name: Check for changes
        id: changes
        run: |
          git add docs/diagrams/
          if git diff --staged --quiet; then
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "changed=true" >> $GITHUB_OUTPUT
          fi

      - name: Commit and push changes
        if: steps.changes.outputs.changed == 'true' && github.event_name == 'push'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git commit -m "docs: Update architecture diagrams [skip ci]"
          git push

      - name: Comment on PR with diagrams
        if: steps.changes.outputs.changed == 'true' && github.event_name == 'pull_request'
        uses: actions/github-script@v8
        with:
          script: |
            const fs = require('fs');

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 📊 Architecture Diagrams Updated

              The architecture diagrams have been automatically updated based on your changes:

              ### System Overview
              ![System Overview](https://raw.githubusercontent.com/${context.repo.owner}/${context.repo.repo}/${context.sha}/docs/diagrams/generated/system-overview.svg)

              ### Component Interactions
              ![Component Interactions](https://raw.githubusercontent.com/${context.repo.owner}/${context.repo.repo}/${context.sha}/docs/diagrams/generated/component-interactions.svg)

              ### Data Flow
              ![Data Flow](https://raw.githubusercontent.com/${context.repo.owner}/${context.repo.repo}/${context.sha}/docs/diagrams/generated/data-flow.svg)

              📁 View all diagrams: [docs/diagrams/](https://github.com/${context.repo.owner}/${context.repo.repo}/tree/${context.sha}/docs/diagrams)
              `
            });
