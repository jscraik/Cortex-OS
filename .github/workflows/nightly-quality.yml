name: Nightly Quality Consolidation

on:
  schedule:
    - cron: '15 2 * * *'  # 02:15 UTC nightly
  workflow_dispatch: {}

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  quality:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Setup Environment
        uses: ./.github/actions/full-stack-setup
        with:
          node-version: '20'
          pnpm-version: '9'
          setup-python: 'false'
          setup-rust: 'false'

      - name: Run tests (coverage)
        run: pnpm test:coverage || true

      - name: Update coverage trend & badge
        run: node scripts/quality/update-coverage-trend.mjs || true

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-trend
          path: |
            reports/coverage-trend.json
            reports/coverage-badge.json

      - name: Semgrep full scan
        run: >-
          pnpm semgrep scan --config .semgrep/owasp-precise.yaml \
          --config .semgrep/owasp-top-10-improved.yaml \
          --config .semgrep/owasp-llm-top-ten.yaml \
          --config .semgrep/mitre-atlas.yaml \
          --json --output reports/semgrep-nightly.json || true

      - name: Upload Semgrep artifact
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-nightly
          path: reports/semgrep-nightly.json

      - name: License scan
        run: node scripts/license/license-scanner.mjs || node scripts/compliance/license-scanner.mjs || true

      - name: Dependency diff (pnpm)
        run: >-
          echo "pnpm lock hash: $(sha256sum pnpm-lock.yaml | cut -d' ' -f1)" | tee reports/dependency-diff.txt

      - name: Dependency risk scoring
        run: node scripts/quality/dependency-risk.mjs || true

      - name: Upload dependency risk
        uses: actions/upload-artifact@v4
        with:
          name: dependency-risk
          path: reports/dependency-risk.json

      - name: Upload dependency diff
        uses: actions/upload-artifact@v4
        with:
          name: dependency-diff
          path: reports/dependency-diff.txt

      - name: Secret scan (gitleaks)
        uses: gitleaks/gitleaks-action@v2
        env:
          GITLEAKS_ENABLE_UPLOAD_ARTIFACT: true
        with:
          args: detect --no-git -v --report-format sarif --report-path gitleaks.sarif || true

      - name: Upload gitleaks SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gitleaks.sarif

      - name: Install Syft
        uses: anchore/sbom-action/download-syft@v0.20.6

      - name: Generate SBOM (CycloneDX JSON)
        run: |
          syft packages dir:. -o cyclonedx-json > reports/sbom-cyclonedx.json || true

      - name: Upload SBOM artifact
        uses: actions/upload-artifact@v4
        with:
          name: sbom-cyclonedx
          path: reports/sbom-cyclonedx.json

      - name: Summary
        run: |
          echo "## Nightly Quality Summary" >> $GITHUB_STEP_SUMMARY
          echo "Semgrep findings: $(jq '.results | length' reports/semgrep-nightly.json 2>/dev/null || echo 'n/a')" >> $GITHUB_STEP_SUMMARY
          echo "Dependency lock hash: $(grep 'pnpm lock hash' reports/dependency-diff.txt | awk '{print $4}')" >> $GITHUB_STEP_SUMMARY
          if [ -f reports/dependency-risk.json ]; then echo "Dependency changes: $(jq '.totalChanges' reports/dependency-risk.json) (high: $(jq '.byRisk.high // 0' reports/dependency-risk.json))" >> $GITHUB_STEP_SUMMARY; fi
          if [ -f reports/sbom-cyclonedx.json ]; then echo "SBOM generated: yes" >> $GITHUB_STEP_SUMMARY; else echo "SBOM generated: no" >> $GITHUB_STEP_SUMMARY; fi
          if [ -f reports/coverage-badge.json ]; then echo "Coverage badge: $(jq -r '.message' reports/coverage-badge.json)" >> $GITHUB_STEP_SUMMARY; fi
