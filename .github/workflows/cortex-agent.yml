name: Cortex Agent
on:
  issue_comment:
    types: [created]

permissions:
  contents: read
  issues: write
  pull-requests: write
  models: read  # Required for GitHub Models

jobs:
  dispatch:
    if: contains(github.event.comment.body, '/cortex')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js and pnpm
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: |
          npm i -g pnpm
          pnpm install --frozen-lockfile

      - name: Build Agent Toolkit
        run: |
          cd packages/agent-toolkit
          pnpm build

      - name: Agent Toolkit Project Validation
        run: pnpm ci:agent-toolkit:validate

      - name: Enforce Local Memory First Layer
        env:
          CI: true
        run: pnpm ci:memory:enforce

      - name: Setup Cortex
        run: |
          curl -L https://github.com/${{ github.repository }}/releases/latest/download/cortex-linux-x64 -o cortex
          chmod +x cortex

      - name: Parse Command
        id: parse
        uses: actions/github-script@v8
        with:
          script: |
            const fs = require('fs');
            const body = context.payload.comment?.body || '';
            const command = body.replace(/^\/cortex\s*/, '');
            fs.writeFileSync('prompt.txt', command, 'utf8');

      - name: Run Cortex Agent
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CORTEX_PROVIDER: github-models
        run: |
          ./cortex run --ci \
            --prompt "$(cat prompt.txt)" \
            --output response.json

      - name: Post Response
        uses: actions/github-script@v8
        with:
          script: |
            const fs = require('fs');
            const response = JSON.parse(fs.readFileSync('response.json'));

            await github.rest.issues.createComment({
              ...context.repo,
              issue_number: context.issue.number,
              body: `## Cortex Response\n\n${response.message}\n\n---\n*Generated by Cortex-CLI v2.0*`
            });
