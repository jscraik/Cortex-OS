name: Automated Review Management

on:
  pull_request:
    types: [opened, ready_for_review, synchronize]
  pull_request_review:
    types: [submitted]

permissions:
  pull-requests: write
  issues: write
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  assign-reviewers:
    name: Auto-assign Reviewers
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
      - name: Checkout code
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955

      - name: Auto-assign reviewers based on changes
        uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd
        with:
          script: |
            const { owner, repo } = context.repo;
            const pull_number = context.payload.pull_request.number;

            // Get PR files
            const { data: files } = await github.rest.pulls.listFiles({
              owner,
              repo,
              pull_number,
            });

            // Determine required reviewers based on file patterns
            const reviewers = new Set();
            const teamReviewers = new Set();

            for (const file of files) {
              const path = file.filename;

              // Security-sensitive files
              if (path.includes('security') || path.includes('.semgrep/') ||
                  path.endsWith('.py') || path.includes('docker/gpl-tools/')) {
                teamReviewers.add('security');
              }

              // Architecture changes
              if (path.includes('apps/cortex-os/') || path.includes('packages/')) {
                teamReviewers.add('architects');
              }

              // CI/CD changes
              if (path.includes('.github/workflows/') || path.includes('docker/')) {
                teamReviewers.add('devops');
              }

              // MCP changes
              if (path.includes('packages/cortex-mcp')) {
                teamReviewers.add('integrations-team');
              }
            }

            // Convert team reviewers to actual usernames (placeholder)
            const teamMapping = {
              'security': ['jamiescottcraik'],
              'architects': ['jamiescottcraik'],
              'devops': ['jamiescottcraik'],
              'integrations-team': ['jamiescottcraik']
            };

            for (const team of teamReviewers) {
              if (teamMapping[team]) {
                teamMapping[team].forEach(user => reviewers.add(user));
              }
            }

            // Remove PR author from reviewers
            reviewers.delete(context.payload.pull_request.user.login);

            if (reviewers.size > 0) {
              await github.rest.pulls.requestReviewers({
                owner,
                repo,
                pull_number,
                reviewers: Array.from(reviewers),
              });
            }

  add-labels:
    name: Auto-label PRs
    runs-on: ubuntu-latest

    steps:
      - name: Add labels based on PR content
        uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd
        with:
          script: |
            const { owner, repo } = context.repo;
            const pull_number = context.payload.pull_request.number;
            const title = context.payload.pull_request.title.toLowerCase();
            const body = context.payload.pull_request.body?.toLowerCase() || '';

            const labels = [];

            // Type-based labels
            if (title.includes('fix') || title.includes('bug')) {
              labels.push('bug');
            }
            if (title.includes('feat') || title.includes('feature')) {
              labels.push('enhancement');
            }
            if (title.includes('docs') || title.includes('documentation')) {
              labels.push('documentation');
            }
            if (title.includes('security') || body.includes('security')) {
              labels.push('security');
            }
            if (title.includes('breaking') || body.includes('breaking change')) {
              labels.push('breaking-change');
            }

            // Priority labels based on content
            if (body.includes('urgent') || body.includes('critical')) {
              labels.push('priority-high');
            }
            if (body.includes('minor') || body.includes('cleanup')) {
              labels.push('priority-low');
            }

            // Size estimation
            const { data: files } = await github.rest.pulls.listFiles({
              owner,
              repo,
              pull_number,
            });

            const changes = files.reduce((sum, file) => sum + file.changes, 0);
            if (changes > 500) {
              labels.push('size-large');
            } else if (changes > 100) {
              labels.push('size-medium');
            } else {
              labels.push('size-small');
            }

            if (labels.length > 0) {
              await github.rest.issues.addLabels({
                owner,
                repo,
                issue_number: pull_number,
                labels,
              });
            }

  check-requirements:
    name: Check PR Requirements
    runs-on: ubuntu-latest

    steps:
      - name: Check PR requirements
        uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd
        with:
          script: |
            const { owner, repo } = context.repo;
            const pull_number = context.payload.pull_request.number;
            const body = context.payload.pull_request.body || '';

            const requirements = [
              { name: 'Summary provided', check: body.includes('## 📋 Summary') },
              { name: 'Type of change selected', check: /- \[x\]/.test(body) },
              { name: 'Testing section filled', check: body.includes('### Test Coverage') },
              { name: 'Security checklist', check: body.includes('### Security') },
            ];

            const missing = requirements.filter(req => !req.check);

            if (missing.length > 0) {
              const comment = `## ⚠️ PR Requirements Check

              The following requirements are missing from your PR:

              ${missing.map(req => `- ❌ ${req.name}`).join('\n')}

              Please update your PR description to include all required sections.

              See the [PR template](.github/pull_request_template.md) for guidance.`;

              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: pull_number,
                body: comment,
              });

              await github.rest.issues.addLabels({
                owner,
                repo,
                issue_number: pull_number,
                labels: ['needs-info'],
              });
              core.setFailed(`Missing PR requirements: ${missing.map(req => req.name).join(', ')}`);
            }

  security-review:
    name: Security Review Check
    runs-on: ubuntu-latest
    if: contains(github.event.pull_request.labels.*.name, 'security')

    steps:
      - name: Require security team approval
        uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd
        with:
          script: |
            const { owner, repo } = context.repo;
            const pull_number = context.payload.pull_request.number;

            const comment = `## 🔒 Security Review Required

            This PR has been flagged for security review. The following additional checks are required:

            - [ ] Security team approval
            - [ ] Vulnerability scan passed
            - [ ] No new security findings
            - [ ] Input validation reviewed
            - [ ] Authentication/authorization verified

            **Security team:** Please conduct a thorough review before approval.`;

            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number: pull_number,
              body: comment,
            });

            await github.rest.issues.addLabels({
              owner,
              repo,
              issue_number: pull_number,
              labels: ['security-review-required'],
            });
