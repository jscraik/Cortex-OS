name: scheduled-lint

on:
  schedule:
    # Daily at 10:00, 14:00, 20:00 UTC (GMT)
    - cron: '0 10 * * *'
    - cron: '0 14 * * *'
    - cron: '0 20 * * *'
  workflow_dispatch: {}

permissions:
  contents: read
  checks: write
  security-events: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: Monorepo Lint & Governance
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Setup Environment
        uses: ./.github/actions/full-stack-setup
        with:
          node-version: '20'
          pnpm-version: '10.3.0'
          setup-python: 'true'
          setup-rust: 'false'

      - name: Biome (changed files baseline)
        run: pnpm biome:ci || true

      - name: ESLint (quality rules)
        run: pnpm lint:quality || true

      - name: ESLint (security profile)
        run: pnpm lint:security || true

      - name: Python Ruff lint
        run: pnpm python:lint || true

      - name: Structural governance
        run: |
          mkdir -p reports || true
          pnpm structure:validate | tee reports/structure-validate.txt || true

      - name: Pattern guard (ripgrep hardened)
        run: pnpm lint:ripgrep:hardened || true

      - name: AST-Grep policy scan
        run: |
          pnpm lint:ast-grep:check || true
          mkdir -p reports || true
          pnpm lint:ast-grep:json | tee reports/ast-grep-results.json || true
          # Generate SARIF for Code Scanning visibility (best-effort)
          if command -v ast-grep >/dev/null 2>&1; then
            ast-grep scan --config sgconfig.json --format sarif > reports/ast-grep.sarif || true
          fi

      - name: Upload AST-Grep JSON report
        if: ${{ hashFiles('reports/ast-grep-results.json') != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: ast-grep-results
          path: |
            reports/ast-grep-results.json
            reports/ast-grep.sarif

      - name: Upload AST-Grep SARIF to Code Scanning
        if: ${{ hashFiles('reports/ast-grep.sarif') != '' }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: reports/ast-grep.sarif

      - name: ESLint SonarJS per-package
        run: node scripts/code-quality/run-sonarjs-per-package.mjs || true

      - name: ESLint SonarJS aggregate
        run: node scripts/code-quality/aggregate-sonarjs-reports.mjs || true

      - name: Semgrep baseline (JSON)
        run: |
          pnpm security:scan:baseline || true
          if [ -f reports/semgrep-baseline.json ]; then echo "Semgrep baseline saved to reports/semgrep-baseline.json"; fi

      - name: Semgrep SARIF (Code Scanning)
        run: |
          mkdir -p reports || true
          semgrep scan --config=.semgrep/owasp-precise.yaml --severity=ERROR --sarif --output=reports/semgrep.sarif . || true
          if [ -f reports/semgrep.sarif ]; then echo "Semgrep SARIF generated"; fi

      - name: Upload SARIF to Code Scanning
        if: ${{ hashFiles('reports/semgrep.sarif') != '' }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: reports/semgrep.sarif

      - name: Docs link check
        run: pnpm docs:links || true

      - name: Summary
        run: |
          echo "## Scheduled Lint Summary" >> $GITHUB_STEP_SUMMARY
          echo "Run date: $(date -u '+%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_STEP_SUMMARY
          echo "Biome exit (soft): see step logs" >> $GITHUB_STEP_SUMMARY
          echo "ESLint quality (soft): see step logs" >> $GITHUB_STEP_SUMMARY
          echo "ESLint security (soft): see step logs" >> $GITHUB_STEP_SUMMARY
          echo "Ruff (soft): see step logs" >> $GITHUB_STEP_SUMMARY
          echo "Structure validate (soft): see step logs" >> $GITHUB_STEP_SUMMARY
          if [ -f reports/structure-validate.txt ]; then
            echo "\n<details><summary>Structure Guard (excerpt)</summary>" >> $GITHUB_STEP_SUMMARY
            head -n 200 reports/structure-validate.txt >> $GITHUB_STEP_SUMMARY || true
            echo "</details>" >> $GITHUB_STEP_SUMMARY
          fi
          echo "Pattern guard (soft): see step logs" >> $GITHUB_STEP_SUMMARY
          echo "AST-Grep (soft): see step logs" >> $GITHUB_STEP_SUMMARY
          echo "ESLint SonarJS (soft): see step logs" >> $GITHUB_STEP_SUMMARY
          # Attempt to surface top complexity offenders if a summary file exists
          if [ -f reports/eslint/sonarjs-aggregate.txt ]; then
            echo "\n<details><summary>Top SonarJS Complexity (excerpt)</summary>" >> $GITHUB_STEP_SUMMARY
            head -n 200 reports/eslint/sonarjs-aggregate.txt >> $GITHUB_STEP_SUMMARY || true
            echo "</details>" >> $GITHUB_STEP_SUMMARY
          fi
          # AST-Grep top rules by count (if jq present)
          if command -v jq >/dev/null 2>&1 && [ -f reports/ast-grep-results.json ]; then
            echo "\n<details><summary>AST-Grep Top Rules</summary>" >> $GITHUB_STEP_SUMMARY
            jq -r '.[].rule_id' reports/ast-grep-results.json | sort | uniq -c | sort -nr | head -n 20 | sed 's/^/ - /' >> $GITHUB_STEP_SUMMARY || true
            echo "</details>" >> $GITHUB_STEP_SUMMARY
            echo "\n<details><summary>AST-Grep Top Files</summary>" >> $GITHUB_STEP_SUMMARY
            jq -r '.[].file' reports/ast-grep-results.json | sort | uniq -c | sort -nr | head -n 20 | sed 's/^/ - /' >> $GITHUB_STEP_SUMMARY || true
            echo "</details>" >> $GITHUB_STEP_SUMMARY
          fi
          if [ -f reports/semgrep-baseline.json ]; then
            echo "Semgrep baseline produced (JSON)." >> $GITHUB_STEP_SUMMARY
          fi
          if [ -f reports/semgrep.sarif ]; then
            echo "Semgrep SARIF uploaded to Code Scanning." >> $GITHUB_STEP_SUMMARY
          fi
          echo "Docs links (soft): see step logs" >> $GITHUB_STEP_SUMMARY

    # NOTE: Soft-fail pattern used so summary always renders; promote to hard gates later if desired.
