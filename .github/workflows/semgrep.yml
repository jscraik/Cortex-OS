name: brAInwav Security Scan - Semgrep 2025
on:
  pull_request:
  push:
    branches: [ main, develop ]
  schedule:
    # Run daily at 2 AM UTC for comprehensive security scanning
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  SEMGREP_VERSION: '1.92.0'
  SEMGREP_BASELINE_REF: main

jobs:
  # Primary Security Scan with All 2025 Rules
  security-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
      pull-requests: write
    outputs:
      findings-count: ${{ steps.findings.outputs.count }}
      high-severity: ${{ steps.findings.outputs.high }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed for proper diff scanning

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache Semgrep rules and dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/semgrep
            ~/.semgrep
            /tmp/semgrep-local-rule-cache
          key: ${{ runner.os }}-semgrep-2025-${{ hashFiles('.semgrep/*.yaml', '.semgrep/**/*.yaml', 'pnpm-lock.yaml', 'package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-semgrep-2025-
            ${{ runner.os }}-semgrep-

      - name: Install Semgrep with all dependencies
        run: |
          pip install semgrep==$SEMGREP_VERSION
          pip install semgrep-supply-chain
          # Install additional dependencies for 2025 rules
          pip install pytest cryptography pyyaml

      - name: Validate Semgrep rules syntax
        run: |
          echo "üîç Validating Semgrep rules syntax..."
          for rule in .semgrep/**/*.yaml; do
            if [ -f "$rule" ]; then
              echo "  Validating $rule"
              semgrep --validate --config="$rule" || {
                echo "‚ùå Rule validation failed for $rule"
                exit 1
              }
            fi
          done
          echo "‚úÖ All Semgrep rules validated successfully"

      - name: Run comprehensive security scan
        id: semgrep-scan
        run: |
          echo "üöÄ Running brAInwav comprehensive security scan..."

          # Build config with all 2025 rules
          CONFIG=$(cat <<EOF
          # Updated OWASP Top 10 2025
          .semgrep/owasp-top-10-improved.yaml
          .semgrep/owasp-precise.yaml

          # Enhanced LLM/AI Security
          .semgrep/llm-security.yaml
          .semgrep/owasp-llm-top-ten.yaml

          # Supply Chain Security
          .semgrep/supply-chain-security.yaml
          p/secrets  # Semgrep Secrets pack
          p/semgrep-supply-chain  # Official supply chain rules

          # Container & Infrastructure Security
          .semgrep/container-infra-security.yaml
          p/docker  # Docker security rules
          p/kubernetes  # Kubernetes security
          p/terraform  # Terraform security

          # Privacy & Compliance
          .semgrep/privacy-compliance.yaml

          # MITRE ATLAS Enhanced
          .semgrep/mitre-atlas.yaml

          # Language-specific security
          p/javascript
          p/typescript
          p/python
          p/go
          p/java
          p/csharp

          # Additional security packs
          p/cwe-top-25
          p/owasp-top-ten
          p/owasp-top-10-2021
          p/security-generic
          p/command-injection
          p/cross-site-scripting
          p/sql-injection
          p/insecure-transport
          p/crypto
          p/jwt
          EOF
          )

          # Run semgrep with diff mode for PRs, full scan for pushes
          if [ "$GITHUB_EVENT_NAME" = "pull_request" ]; then
            echo "üìä Running diff scan for PR..."
            semgrep \
              --config="$CONFIG" \
              --baseline-ref="$SEMGREP_BASELINE_REF" \
              --severity=INFO \
              --json \
              --output=semgrep-report.json \
              --sarif \
              --metrics=off \
              --disable-version-check \
              || true
          else
            echo "üîç Running full repository scan..."
            semgrep \
              --config="$CONFIG" \
              --severity=INFO \
              --json \
              --output=semgrep-report.json \
              --sarif \
              --metrics=on \
              --disable-version-check \
              || true
          fi

          # Count findings by severity
          HIGH=$(jq '.results[] | select(.metadata.severity == "ERROR") | .metadata.severity' semgrep-report.json | wc -l || echo "0")
          MEDIUM=$(jq '.results[] | select(.metadata.severity == "WARNING") | .metadata.severity' semgrep-report.json | wc -l || echo "0")
          INFO=$(jq '.results[] | select(.metadata.severity == "INFO") | .metadata.severity' semgrep-report.json | wc -l || echo "0")
          TOTAL=$((HIGH + MEDIUM + INFO))

          echo "üìà Scan Results Summary:"
          echo "  High Severity: $HIGH"
          echo "  Medium Severity: $MEDIUM"
          echo "  Info: $INFO"
          echo "  Total Findings: $TOTAL"

          # Set outputs for GitHub API usage
          echo "count=$TOTAL" >> $GITHUB_OUTPUT
          echo "high=$HIGH" >> $GITHUB_OUTPUT
          echo "medium=$MEDIUM" >> $GITHUB_OUTPUT
          echo "info=$INFO" >> $GITHUB_OUTPUT

          # Fail the job if high severity findings exist
          if [ "$HIGH" -gt 0 ]; then
            echo "‚ùå Security scan failed: $HIGH high severity findings detected"
            echo "üìÑ Check semgrep.sarif for detailed findings"
            exit 1
          fi

      - name: Count findings for output
        id: findings
        run: |
          if [ -f semgrep-report.json ]; then
            HIGH=$(jq '.results[] | select(.metadata.severity == "ERROR")' semgrep-report.json | wc -l || echo "0")
            echo "count=$HIGH" >> $GITHUB_OUTPUT
            echo "high=$HIGH" >> $GITHUB_OUTPUT
          else
            echo "count=0" >> $GITHUB_OUTPUT
            echo "high=0" >> $GITHUB_OUTPUT
          fi

      - name: Generate security report summary
        if: always()
        run: |
          echo "## üõ°Ô∏è brAInwav Security Scan Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Scan Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "**Semgrep Version:** $SEMGREP_VERSION" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -f semgrep-report.json ]; then
            HIGH=$(jq -r '.results[] | select(.metadata.severity == "ERROR") | .metadata.severity' semgrep-report.json | wc -l || echo "0")
            MEDIUM=$(jq -r '.results[] | select(.metadata.severity == "WARNING") | .metadata.severity' semgrep-report.json | wc -l || echo "0")
            INFO=$(jq -r '.results[] | select(.metadata.severity == "INFO") | .metadata.severity' semgrep-report.json | wc -l || echo "0")

            echo "### üìä Scan Results" >> $GITHUB_STEP_SUMMARY
            echo "| Severity | Count |" >> $GITHUB_STEP_SUMMARY
            echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
            echo "| üî¥ High | $HIGH |" >> $GITHUB_STEP_SUMMARY
            echo "| üü° Medium | $MEDIUM |" >> $GITHUB_STEP_SUMMARY
            echo "| üîµ Info | $INFO |" >> $GITHUB_STEP_SUMMARY
            echo "| **Total** | **$((HIGH + MEDIUM + INFO))** |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY

            # Show top findings
            echo "### üîç Top High Severity Findings" >> $GITHUB_STEP_SUMMARY
            jq -r '.results[] | select(.metadata.severity == "ERROR") | "- **\(.metadata.category // .metadata.\'owasp-llm-top-10\' // .metadata.owasp // .metadata.cwe[0] // "Unknown")**: \(.message) (\(.path):\(.start.line))"' semgrep-report.json | head -10 >> $GITHUB_STEP_SUMMARY || echo "No high severity findings found!" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ‚úÖ Scan Results" >> $GITHUB_STEP_SUMMARY
            echo "No security findings detected!" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìã Coverage" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ OWASP Top 10 2025" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ OWASP LLM Top 10 2025" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ MITRE ATLAS Framework" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Supply Chain Security" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Container & Infrastructure Security" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Privacy & Compliance (GDPR, CCPA, EU AI Act)" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Language-specific Security Rules" >> $GITHUB_STEP_SUMMARY

      - name: Upload SARIF to GitHub Security
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif
          category: semgrep-scan

      - name: Upload JSON report as artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-security-report
          path: |
            semgrep-report.json
            semgrep.sarif
          retention-days: 30

      - name: Comment PR with findings
        if: github.event_name == 'pull_request' && (steps.findings.outputs.high > 0 || steps.findings.outputs.count > 0)
        uses: actions/github-script@v8
        with:
          script: |
            const fs = require('fs');

            if (fs.existsSync('semgrep-report.json')) {
              const report = JSON.parse(fs.readFileSync('semgrep-report.json', 'utf8'));
              const high = report.results.filter(r => r.metadata.severity === 'ERROR').length;
              const medium = report.results.filter(r => r.metadata.severity === 'WARNING').length;

              let comment = `## üîç brAInwav Security Scan Results\n\n`;
              comment += `**High Severity:** ${high} ${high === 1 ? 'finding' : 'findings'}\n`;
              comment += `**Medium Severity:** ${medium} ${medium === 1 ? 'finding' : 'findings'}\n\n`;

              if (high > 0) {
                comment += `### üö® High Severity Issues\n\n`;
                report.results
                  .filter(r => r.metadata.severity === 'ERROR')
                  .slice(0, 5)
                  .forEach(r => {
                    comment += `- **${r.metadata.category || 'Security'}**: ${r.message} (${r.path}:${r.start.line})\n`;
                  });

                if (high > 5) {
                  comment += `- ... and ${high - 5} more high severity issues\n`;
                }
              }

              comment += `\nüìÑ [View detailed SARIF report](tab-sarif)`;

              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }

  # Supply Chain Security Scan
  supply-chain-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    needs: security-scan

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Run Supply Chain Security Scan
        run: |
          pip install semgrep semgrep-supply-chain

          echo "üîó Running supply chain security scan..."
          semgrep \
            --config=p/semgrep-supply-chain \
            --config=.semgrep/supply-chain-security.yaml \
            --severity=WARNING \
            --json \
            --output=supply-chain-report.json \
            --sarif \
            || true

      - name: Upload Supply Chain SARIF
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: supply-chain-report.sarif
          category: supply-chain-scan

  # Container Security Scan
  container-scan:
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.modified, 'Dockerfile') || contains(github.event.head_commit.modified, '.dockerignore')
    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Container Security Scan
        run: |
          # Install Semgrep with Docker rules
          pip install semgrep

          echo "üê≥ Running container security scan..."
          semgrep \
            --config=p/docker \
            --config=.semgrep/container-infra-security.yaml \
            --severity=WARNING \
            --json \
            --output=container-report.json \
            --sarif \
            || true

      - name: Upload Container SARIF
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: container-report.sarif
          category: container-scan

  # Periodic Security Summary
  security-summary:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    needs: [security-scan, supply-chain-scan]
    permissions:
      contents: read
      issues: write

    steps:
      - name: Create Security Summary Issue
        uses: actions/github-script@v8
        with:
          script: |
            const today = new Date().toISOString().split('T')[0];
            const title = `üõ°Ô∏è Security Scan Summary - ${today}`;

            const body = `
            # brAInwav Security Scan Summary

            **Date:** ${today}
            **Repository:** ${context.repo.owner}/${context.repo.repo}

            ## üìä Scan Coverage
            - ‚úÖ OWASP Top 10 2025
            - ‚úÖ OWASP LLM Top 10 2025
            - ‚úÖ MITRE ATLAS Framework
            - ‚úÖ Supply Chain Security
            - ‚úÖ Container & Infrastructure Security
            - ‚úÖ Privacy & Compliance (GDPR, CCPA, EU AI Act)

            ## üîç Findings
            - High Severity: ${{ needs.security-scan.outputs.high }} findings
            - Total Findings: ${{ needs.security-scan.outputs.findings-count }} findings

            ## üìã Next Steps
            - Review high severity findings immediately
            - Address medium severity findings in next sprint
            - Monitor info-level findings for trends
            - Update rules based on emerging threats

            ---
            *This report is automatically generated by brAInwav Security Pipeline*
            `;

            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['security', 'automated-scan']
            });
