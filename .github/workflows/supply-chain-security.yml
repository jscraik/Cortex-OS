name: Supply Chain Security

on:
  pull_request:
    paths:
      - 'pnpm-lock.yaml'
      - 'package.json'
      - '**/package.json'
      - 'pyproject.toml'
      - 'uv.lock'
      - 'Cargo.lock'
      - 'Cargo.toml'
  push:
    branches: [ main ]
    paths:
      - 'pnpm-lock.yaml'
      - 'package.json'
      - '**/package.json'
      - 'pyproject.toml'
      - 'uv.lock'
      - 'Cargo.lock'
      - 'Cargo.toml'
  schedule:
    - cron: '0 4 * * 2' # Weekly Tuesday 04:00 UTC

concurrency:
  group: supply-chain-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  security-events: write
  pull-requests: write

jobs:
  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Dependency Review
        # Pin to specific commit for supply chain security
        uses: actions/dependency-review-action@0c155c5e8556a497adf53f2c18edabf945ed8e70
        with:
          config-file: .github/dependency-review-config.yml
          fail-on-severity: high
          allow-licenses: MIT, Apache-2.0, BSD-2-Clause, BSD-3-Clause, ISC, 0BSD
          deny-licenses: GPL-2.0, GPL-3.0, LGPL-2.0, LGPL-2.1, LGPL-3.0

  provenance-check:
    name: Supply Chain Provenance
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        # Pin to specific commit SHA for maximum supply chain security
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          fetch-depth: 0

      - name: Setup Node with pinned version
        # Pin to specific commit SHA
        uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8 # v4.0.2
        with:
          node-version: '22'

      - name: Setup pnpm with pinned version
        # Pin to specific commit SHA
        uses: pnpm/action-setup@fe02b34f77f8bc703788d5817da081398fad5dd2 # v4.0.0
        with:
          version: '9'

      - name: Verify lockfile integrity
        run: |
          # Verify pnpm lockfile hasn't been tampered with
          pnpm install --frozen-lockfile --offline || {
            echo "‚ùå Lockfile verification failed - potential supply chain compromise"
            exit 1
          }
          
          # Check for suspicious patterns in dependencies
          echo "üîç Checking for suspicious dependency patterns..."
          if pnpm list --json | jq -r '.[].dependencies // {} | keys[]' | grep -E '(^rc$|^request$|^node-ipc$|^colors$)'; then
            echo "‚ö†Ô∏è  Detected potentially compromised packages"
            pnpm list --json | jq -r '.[].dependencies // {} | to_entries[] | select(.key | test("^(rc|request|node-ipc|colors)$")) | "\(.key)@\(.value.version)"'
          fi

      - name: SLSA provenance for npm
        # Pin to specific commit SHA
        uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v2.0.0
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        with:
          base64-subjects: ${{ steps.hash.outputs.hashes }}
          provenance-name: cortex-os-npm-provenance.intoto.jsonl

      - name: Generate dependency hash
        id: hash
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          # Generate hash of all lockfiles for provenance
          echo "hashes=$(sha256sum pnpm-lock.yaml pyproject.toml 2>/dev/null | base64 -w0)" >> $GITHUB_OUTPUT

  security-advisories:
    name: Security Advisories Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Setup environment
        uses: ./.github/actions/full-stack-setup
        with:
          node-version: '22'
          pnpm-version: '9'
          python-version: '3.11'
          uv: 'true'

      - name: Node.js security audit
        run: |
          echo "üîç Running Node.js security audit..."
          pnpm audit --audit-level=moderate --json > npm-audit.json || true
          
          # Count vulnerabilities
          HIGH_VULNS=$(jq -r '.metadata.vulnerabilities.high // 0' npm-audit.json)
          CRITICAL_VULNS=$(jq -r '.metadata.vulnerabilities.critical // 0' npm-audit.json)
          
          echo "High vulnerabilities: $HIGH_VULNS"
          echo "Critical vulnerabilities: $CRITICAL_VULNS"
          
          if [ "$CRITICAL_VULNS" -gt 0 ]; then
            echo "‚ùå Critical vulnerabilities found - failing build"
            exit 1
          fi
          
          if [ "$HIGH_VULNS" -gt 5 ]; then
            echo "‚ö†Ô∏è  Too many high-severity vulnerabilities ($HIGH_VULNS > 5)"
            exit 1
          fi

      - name: Python security audit with Safety
        run: |
          echo "üîç Running Python security audit with Safety..."
          uv run safety check --json --output safety-audit.json || true
          
          # Check for critical Python vulnerabilities
          if [ -f "safety-audit.json" ] && [ "$(jq length safety-audit.json)" -gt 0 ]; then
            echo "‚ö†Ô∏è  Python security vulnerabilities detected:"
            uv run safety check --short-report
          fi

      - name: OSV vulnerability scan
        run: |
          echo "üîç Running OSV vulnerability scan..."
          curl -L https://github.com/google/osv-scanner/releases/latest/download/osv-scanner_linux_amd64 -o osv-scanner
          chmod +x osv-scanner
          
          # Scan lockfiles for known vulnerabilities
          ./osv-scanner --lockfile=pnpm-lock.yaml --format=json --output=osv-results.json || {
            echo "OSV scan found vulnerabilities"
            exit 1
          }

      - name: Upload security artifacts
        if: always()
        uses: ./.github/actions/upload-security-artifacts
        with:
          name: supply-chain-audit-${{ github.sha }}
          reports-path: '*-audit.json *-results.json'

  license-compliance:
    name: License Compliance
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Setup environment
        uses: ./.github/actions/full-stack-setup
        with:
          node-version: '22'
          pnpm-version: '9'

      - name: License compliance check
        run: |
          echo "üîç Checking license compliance..."
          
          # Use license-checker for comprehensive license analysis
          npx license-checker --json --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;0BSD;CC0-1.0' > license-report.json || {
            echo "‚ùå License compliance check failed"
            echo "Found non-compliant licenses:"
            npx license-checker --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;0BSD;CC0-1.0' || true
            exit 1
          }
          
          echo "‚úÖ All licenses comply with policy"

      - name: Generate SBOM (CycloneDX)
        run: |
          echo "üìã Generating Software Bill of Materials..."
          npx @cyclonedx/bom --output-file cortex-os-sbom.json || true
          
          if [ -f "cortex-os-sbom.json" ]; then
            echo "‚úÖ SBOM generated successfully"
          else
            echo "‚ö†Ô∏è  SBOM generation failed"
          fi

      - name: Upload compliance artifacts
        if: always()
        uses: ./.github/actions/upload-security-artifacts
        with:
          name: license-compliance-${{ github.sha }}
          sbom-path: 'cortex-os-sbom.json'
          reports-path: 'license-report.json'
