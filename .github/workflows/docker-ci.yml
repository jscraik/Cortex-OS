name: Docker CI/CD

on:
  push:
    branches: [main]
    paths:
      - 'packages/*/Dockerfile'
      - 'docker-compose*.yml'
      - '.dockerignore'
      - '.github/workflows/docker-ci.yml'
  pull_request:
    paths:
      - 'packages/*/Dockerfile'
      - 'docker-compose*.yml'
      - '.dockerignore'
      - '.github/workflows/docker-ci.yml'
  workflow_dispatch:
    inputs:
      publish:
        description: 'Publish images to registry'
        required: false
        type: boolean
        default: false

permissions:
  contents: read
  packages: write # for GitHub Container Registry

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  BRAINWAV_ENV: ci

jobs:
  detect-changes:
    name: Detect Changed Dockerfiles
    runs-on: ubuntu-latest
    outputs:
      mcp-server: ${{ steps.filter.outputs.mcp-server }}
      memory-core: ${{ steps.filter.outputs.memory-core }}
      memory-rest-api: ${{ steps.filter.outputs.memory-rest-api }}
      any-changed: ${{ steps.filter.outputs.any-changed }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Check path filter
        uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            mcp-server:
              - 'packages/mcp-server/**'
              - 'packages/mcp-server/Dockerfile'
            memory-core:
              - 'packages/memory-core/**'
              - 'packages/memory-core/Dockerfile'
            memory-rest-api:
              - 'packages/memory-rest-api/**'
              - 'packages/memory-rest-api/Dockerfile'
            any-changed:
              - 'packages/*/Dockerfile'
              - 'docker-compose*.yml'

  validate-dockerfiles:
    name: Validate Dockerfiles
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.any-changed == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run hadolint (Dockerfile linter)
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: |
            packages/mcp-server/Dockerfile
            packages/memory-core/Dockerfile
            packages/memory-rest-api/Dockerfile
          ignore: DL3008,DL3009,DL3015
          failure-threshold: warning

  build-mcp-server:
    name: Build MCP Server Image
    runs-on: ubuntu-latest
    needs: [detect-changes, validate-dockerfiles]
    if: needs.detect-changes.outputs.mcp-server == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request' || inputs.publish
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/mcp-server
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./packages/mcp-server/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' || inputs.publish }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BRAINWAV_VERSION=${{ github.sha }}
            BRAINWAV_ENV=production

      - name: Scan image with Trivy
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: ${{ env.REGISTRY }}/${{ github.repository }}/mcp-server:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-mcp-server.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-mcp-server.sarif'
          category: 'container-mcp-server'

  build-memory-core:
    name: Build Memory Core Image
    runs-on: ubuntu-latest
    needs: [detect-changes, validate-dockerfiles]
    if: needs.detect-changes.outputs.memory-core == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request' || inputs.publish
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/memory-core
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=sha,prefix={{branch}}-

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./packages/memory-core/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' || inputs.publish }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Scan image with Trivy
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: ${{ env.REGISTRY }}/${{ github.repository }}/memory-core:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-memory-core.sarif'
          severity: 'CRITICAL,HIGH'

  build-memory-rest-api:
    name: Build Memory REST API Image
    runs-on: ubuntu-latest
    needs: [detect-changes, validate-dockerfiles]
    if: needs.detect-changes.outputs.memory-rest-api == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request' || inputs.publish
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/memory-rest-api
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=sha,prefix={{branch}}-

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./packages/memory-rest-api/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' || inputs.publish }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Scan image with Trivy
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: ${{ env.REGISTRY }}/${{ github.repository }}/memory-rest-api:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-memory-rest-api.sarif'
          severity: 'CRITICAL,HIGH'

  test-docker-compose:
    name: Test Docker Compose Stacks
    runs-on: ubuntu-latest
    needs: validate-dockerfiles
    strategy:
      matrix:
        compose-file:
          - docker-compose.infra.yml
          - docker-compose.yml
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validate compose file
        run: docker compose -f ${{ matrix.compose-file }} config > /dev/null

      - name: Start infrastructure stack
        if: matrix.compose-file == 'docker-compose.infra.yml'
        run: |
          docker compose -f ${{ matrix.compose-file }} up -d
          sleep 10

      - name: Health check services
        if: matrix.compose-file == 'docker-compose.infra.yml'
        run: |
          echo "Testing Qdrant..."
          curl -f http://localhost:6333/health || exit 1
          
          echo "Testing NATS..."
          curl -f http://localhost:8222/healthz || exit 1
          
          echo "Testing Ollama..."
          curl -f http://localhost:11434/api/tags || exit 1

      - name: Cleanup
        if: always()
        run: docker compose -f ${{ matrix.compose-file }} down -v

  sbom-generation:
    name: Generate SBOM for Docker Images
    runs-on: ubuntu-latest
    needs: [build-mcp-server, build-memory-core, build-memory-rest-api]
    if: |
      always() && 
      (needs.build-mcp-server.result == 'success' || 
       needs.build-memory-core.result == 'success' || 
       needs.build-memory-rest-api.result == 'success')
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Generate SBOM
        uses: anchore/sbom-action@v0.20.6
        with:
          image: ${{ env.REGISTRY }}/${{ github.repository }}/mcp-server:${{ github.sha }}
          format: spdx-json
          output-file: sbom-mcp-server.spdx.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom-artifacts
          path: '*.spdx.json'
          retention-days: 90

# Co-authored-by: brAInwav Development Team <dev@brainwav.dev>
# Co-authored-by: factory-droid[bot] <138933559+factory-droid[bot]@users.noreply.github.com>
