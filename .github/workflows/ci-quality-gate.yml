name: CI Quality Gate

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches: [main]

jobs:
  quality-gate:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    env:
      NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}
      NX_CLOUD_DISTRIBUTED_TASK_EXECUTION: true
      NX_CLOUD_CACHE: true
    steps:
      - uses: actions/checkout@v4
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.16.0
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"
      - name: Install dependencies
        run: pnpm install --frozen-lockfile --ignore-scripts
      - name: Run coverage (branch sample)
        run: pnpm coverage:branches:record
        env:
          NX_CLOUD_RETRY_FLAKY_TASKS: true
      - name: Run mutation (no enforcement here)
        run: pnpm mutation:test
        env:
          NX_CLOUD_RETRY_FLAKY_TASKS: true
      - name: Generate badges & metrics
        run: pnpm badges:generate
      - name: Quality Gate Check
        run: pnpm quality:gate
      - name: Post PR Quality Metrics Comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v8
        with:
          script: |
            const fs = require('fs');
            const path = 'reports/badges/metrics.json';
            if (!fs.existsSync(path)) {
              core.warning('metrics.json not found; skipping comment');
              return;
            }
            const metrics = JSON.parse(fs.readFileSync(path, 'utf8'));
            const header = '### üìä Cortex-OS Quality Gate Metrics';
            const details = `\n| Metric | Value | Threshold | Status |\n|--------|-------|-----------|--------|\n| Branch Coverage | ${metrics.branchCoverage}% | ${metrics.qualityGate.branchMin}% | ${metrics.branchCoverage >= metrics.qualityGate.branchMin ? '‚úÖ' : '‚ùå'} |\n| Mutation Score | ${metrics.mutationScore}% | ${metrics.qualityGate.mutationMin}% | ${metrics.mutationScore >= metrics.qualityGate.mutationMin ? '‚úÖ' : '‚ùå'} |\n| Composite Gate | ${metrics.qualityGate.pass ? 'PASS' : 'FAIL'} | both | ${metrics.qualityGate.pass ? '‚úÖ' : '‚ùå'} |`; 
            const footer = '\n_Last updated: ' + new Date().toISOString() + '_';
            const body = `<!-- QUALITY_GATE_METRICS_START -->\n${header}\n${details}\n${footer}\n<!-- QUALITY_GATE_METRICS_END -->`;
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              per_page: 100
            });
            const existing = comments.find(c => c.body && c.body.includes('<!-- QUALITY_GATE_METRICS_START -->'));
            if (existing) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existing.id,
                body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body
              });
            }
      - name: Upload metrics artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: quality-metrics
          path: |
            reports/badges/metrics.json
            reports/mutation-history.json
            reports/branch-coverage-history.json
