name: ci
on:
  push: { branches: ["main"] }
  pull_request:

permissions:
  contents: read
  security-events: write # for potential future SARIF uploads (can be narrowed if unused)

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  quality:
    name: Quality Gates (Lint • Typecheck • Test • Build)
    uses: ./.github/workflows/quality-gates.yml
    with:
      node-version: '22'
      pnpm-version: '9'
      use-smart-scripts: true
      test-coverage: true

  bun-lane:
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup mise (Node + Bun)
        uses: jdx/mise-action@156251fcc627ac4e26cb0f93dd47d1d4979abf24
        with:
          tool_versions: |
            nodejs 22
            bun 1.2.2
      - name: Print bun version
        run: bun -v
      - name: Install deps (bun)
        run: bun install --frozen-lockfile || true
      - name: Run tests (bun, non-blocking)
        run: bun run -T nx run-many -t test --parallel || true

  secrets:
    name: Secret Scan (Gitleaks)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Gitleaks (PR diff)
        if: github.event_name == 'pull_request'
        uses: gitleaks/gitleaks-action@v2
        with:
          args: detect --redact --report-format sarif --report-path gitleaks.sarif --config=.gitleaks.toml

      - name: Gitleaks (full scan)
        if: github.event_name != 'pull_request'
        uses: gitleaks/gitleaks-action@v2
        with:
          args: detect --redact --no-git --report-format sarif --report-path gitleaks.sarif --config=.gitleaks.toml

      - name: Upload Gitleaks SARIF
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gitleaks.sarif

  rag-e2e:
    name: RAG HTTP E2E
    runs-on: ubuntu-latest
    needs: quality
    if: vars.CORTEX_RAG_E2E == 'true' || env.CORTEX_RAG_E2E == 'true'
    services:
      qdrant:
        image: qdrant/qdrant:latest
        ports:
          - 6333:6333
      neo4j:
        image: neo4j:5.21.0
        env:
          NEO4J_AUTH: neo4j/secret123
        ports:
          - 7474:7474
          - 7687:7687
    env:
      CORTEX_RAG_E2E: 'true'
      QDRANT_URL: http://127.0.0.1:6333
      EXTERNAL_KG_ENABLED: 'true'
      NEO4J_URI: bolt://127.0.0.1:7687
      NEO4J_USER: neo4j
      NEO4J_PASSWORD: secret123
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: '10.18.0'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Wait for Qdrant
        run: |
          for i in {1..30}; do
            if curl -sf http://127.0.0.1:6333/collections > /dev/null; then
              exit 0
            fi
            sleep 2
          done
          echo "Qdrant health check failed" >&2
          exit 1

      - name: Wait for Neo4j
        run: |
          for i in {1..30}; do
            if nc -z 127.0.0.1 7687; then
              exit 0
            fi
            sleep 2
          done
          echo "Neo4j health check failed" >&2
          exit 1

      - name: Run RAG E2E suite
        run: pnpm test:rag:e2e
