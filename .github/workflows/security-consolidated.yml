name: Security - Consolidated Scan

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

permissions:
  security-events: write
  contents: read
  actions: read

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'
  PNPM_VERSION: '9'
  TASK_FOLDER: 'tasks/security-operations-plan/verification'

jobs:
  # Secret scanning with Gitleaks
  secret-scan:
    name: Secret Detection
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run gitleaks (diff only for PR)
        if: github.event_name == 'pull_request'
        uses: gitleaks/gitleaks-action@v2
        with:
          args: detect --redact --report-format sarif --report-path gitleaks.sarif

      - name: Run gitleaks (full scan)
        if: github.event_name != 'pull_request'
        uses: gitleaks/gitleaks-action@v2
        with:
          args: detect --redact --no-git --report-format sarif --report-path gitleaks.sarif

      - name: Upload Gitleaks SARIF
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gitleaks.sarif

      - name: Upload Gitleaks artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-report
          path: gitleaks.sarif
          retention-days: 30

  # Semgrep static analysis
  semgrep-analysis:
    name: Semgrep Security Analysis
    runs-on: ubuntu-latest
    container:
      image: semgrep/semgrep
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Semgrep with OWASP rules
        run: |
          semgrep scan \
            --config=packages/cortex-sec/rulesets/semgrep/cortex-aggregate.yml \
            --config=packages/cortex-sec/rulesets/semgrep/cortex-js-ts.yml \
            --config=packages/cortex-sec/rulesets/semgrep/cortex-py.yml \
            --config=.semgrep/owasp-precise.yaml \
            --config=.semgrep/owasp-top-10.yaml \
            --config=.semgrep/llm-security.yaml \
            --config=.semgrep/mitre-atlas.yaml \
            --config=.semgrep/owasp-llm-top-ten.yaml \
            --severity=ERROR \
            --severity=WARNING \
            --sarif \
            --output=semgrep-results.sarif \
            --max-memory=2048 \
            .

      - name: Upload Semgrep SARIF
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: semgrep-results.sarif

      - name: Upload Semgrep results as artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: semgrep-results
          path: semgrep-results.sarif
          retention-days: 30

  # Dependency vulnerability scanning
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: npm audit (moderate as advisory)
        run: |
          pnpm audit --audit-level=moderate --json > npm-audit-results.json || true

      - name: OSV scan (JSON)
        uses: google/osv-scanner-action@c0e8a1142dcb3ae443d26c8f6a2b774db9f6c6ea
        with:
          scan-args: scan --lockfile=pnpm-lock.yaml --format=json --output=osv-results.json
        continue-on-error: true

      - name: Ensure OSV results placeholder
        if: always()
        run: |
          if [ ! -f osv-results.json ]; then
            echo '{"results":[]}' > osv-results.json
          fi

      - name: Upload OSV artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: osv-results
          path: osv-results.json
          retention-days: 30

      - name: Trivy filesystem scan
        uses: aquasecurity/trivy-action@b6643a29fecd7f34b3597bc6acb0a98b03d33ff8
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy SARIF
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: trivy-results.sarif

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Python security audit
        run: |
          uv sync
          uv run pip-audit --format=json --output=python-audit-results.json || true
          uv run safety check --json > safety-results.json || true

      - name: Snyk scan (optional)
        if: ${{ secrets.SNYK_TOKEN != '' }}
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
        continue-on-error: true

      - name: Upload audit results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dependency-audit-results
          path: |
            npm-audit-results.json
            python-audit-results.json
            safety-results.json
            osv-results.json
          retention-days: 30

  # SBOM generation
  sbom-generation:
    name: Generate SBOM
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate SBOM (CycloneDX)
        run: pnpm sbom:generate

      - name: Upload SBOM artifact
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom/**
          retention-days: 90

  # Security summary and reporting
  security-summary:
    name: Security Summary & Reporting
    runs-on: ubuntu-latest
    needs: [secret-scan, semgrep-analysis, dependency-scan, sbom-generation]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies for pnpm security scan
        run: pnpm install --frozen-lockfile

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Semgrep CLI
        run: python -m pip install --upgrade pip && python -m pip install semgrep

      - name: Run pnpm security:scan (SARIF)
        run: |
          if jq -e '.scripts["security:scan"]' package.json > /dev/null; then
            pnpm security:scan -- --sarif --output=pnpm-security-scan.sarif
          else
            echo "No 'security:scan' script found in package.json. Skipping pnpm security scan."
            # Optionally, create an empty SARIF file to avoid downstream errors
            echo '{"version":"2.1.0","runs":[]}' > pnpm-security-scan.sarif
          fi

      - name: Upload pnpm security scan artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pnpm-security-scan
          path: pnpm-security-scan.sarif
          retention-days: 30

      - name: Download all security artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./security-results/

      - name: Generate comprehensive security summary
        run: |
          echo "# 🔒 Comprehensive Security Scan Summary" > security-summary.md
          echo "" >> security-summary.md
          echo "**Scan Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> security-summary.md
          echo "**Commit:** ${{ github.sha }}" >> security-summary.md
          echo "" >> security-summary.md

          # Gitleaks Summary
          echo "## 🔐 Secret Detection (Gitleaks)" >> security-summary.md
          GITLEAKS_SARIF="./security-results/gitleaks-report/gitleaks.sarif"
          if [ -f "$GITLEAKS_SARIF" ]; then
            SECRETS=$(jq '.runs[0].results | length' "$GITLEAKS_SARIF" 2>/dev/null || echo "0")
            echo "- **Secrets Found:** $SECRETS" >> security-summary.md
          else
            echo "- **Status:** No secrets detected" >> security-summary.md
          fi
          echo "" >> security-summary.md

          # Semgrep Summary
          echo "## 🛡️ Static Analysis (Semgrep)" >> security-summary.md
          if [ -f "./security-results/semgrep-results/semgrep-results.sarif" ]; then
            SEMGREP_CRITICAL=$(jq '.runs[0].results | map(select(.level == "error")) | length' ./security-results/semgrep-results/semgrep-results.sarif 2>/dev/null || echo "0")
            SEMGREP_HIGH=$(jq '.runs[0].results | map(select(.level == "warning")) | length' ./security-results/semgrep-results/semgrep-results.sarif 2>/dev/null || echo "0")
            echo "- **Critical Issues:** $SEMGREP_CRITICAL" >> security-summary.md
            echo "- **High Issues:** $SEMGREP_HIGH" >> security-summary.md
          else
            echo "- **Status:** No static analysis issues found" >> security-summary.md
          fi
          echo "" >> security-summary.md

          # Dependency Summary
          echo "## 📦 Dependency Vulnerabilities" >> security-summary.md
          if [ -f "./security-results/dependency-audit-results/npm-audit-results.json" ]; then
            NPM_CRITICAL=$(jq '.metadata.vulnerabilities.critical // 0' ./security-results/dependency-audit-results/npm-audit-results.json 2>/dev/null || echo "0")
            NPM_HIGH=$(jq '.metadata.vulnerabilities.high // 0' ./security-results/dependency-audit-results/npm-audit-results.json 2>/dev/null || echo "0")
            echo "- **NPM Critical:** $NPM_CRITICAL" >> security-summary.md
            echo "- **NPM High:** $NPM_HIGH" >> security-summary.md
          fi
          if [ -f "./security-results/dependency-audit-results/python-audit-results.json" ]; then
            PYTHON_VULNS=$(jq '. | length' ./security-results/dependency-audit-results/python-audit-results.json 2>/dev/null || echo "0")
            echo "- **Python Vulnerabilities:** $PYTHON_VULNS" >> security-summary.md
          fi
          if [ -f "./security-results/osv-results/osv-results.json" ]; then
            OSV_TOTAL=$(jq '.results | length' ./security-results/osv-results/osv-results.json 2>/dev/null || echo "0")
            echo "- **OSV Findings:** $OSV_TOTAL" >> security-summary.md
          fi
          echo "" >> security-summary.md

          # SBOM Summary
          echo "## 📋 Software Bill of Materials" >> security-summary.md
          if [ -d "./security-results/sbom" ]; then
            SBOM_FILES=$(find ./security-results/sbom -name "*.json" | wc -l)
            echo "- **SBOM Files Generated:** $SBOM_FILES" >> security-summary.md
          else
            echo "- **Status:** SBOM generation completed" >> security-summary.md
          fi
          echo "" >> security-summary.md

          # Security Score Calculation
          echo "## 📊 Security Score" >> security-summary.md
          TOTAL_ISSUES=$((${SECRETS:-0} + ${SEMGREP_CRITICAL:-0} + ${NPM_CRITICAL:-0}))
          if [ "$TOTAL_ISSUES" -eq 0 ]; then
            echo "- **Overall Status:** ✅ PASS - No critical security issues found" >> security-summary.md
          elif [ "$TOTAL_ISSUES" -le 3 ]; then
            echo "- **Overall Status:** ⚠️ REVIEW - $TOTAL_ISSUES critical issues found" >> security-summary.md
          else
            echo "- **Overall Status:** ❌ FAIL - $TOTAL_ISSUES critical security issues require attention" >> security-summary.md
          fi

          cat security-summary.md

      - name: Comment on PR with security summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v8
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('security-summary.md', 'utf8');

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });

      - name: Upload security summary
        uses: actions/upload-artifact@v4
        with:
          name: security-summary-report
          path: security-summary.md
          retention-days: 30

      - name: Publish security evidence checklist
        if: always()
        run: |
          PNPM_PATH="./security-results/pnpm-security-scan/pnpm-security-scan.sarif"
          SEMGREP_PATH="./security-results/semgrep-results/semgrep-results.sarif"
          GITLEAKS_PATH="./security-results/gitleaks-report/gitleaks.sarif"
          OSV_PATH="./security-results/osv-results/osv-results.json"
          CHECKLIST_FILE=security-evidence-checklist.md

          mark() {
            local path="$1"
            if [ -f "$path" ]; then
              echo "[x]"
            else
              echo "[ ]"
            fi
          }

          {
            echo "## Security Evidence Checklist"
            echo ""
            echo "- $(mark "$PNPM_PATH") pnpm security:scan SARIF (${PNPM_PATH:-missing})"
            echo "- $(mark "$SEMGREP_PATH") Semgrep SARIF (${SEMGREP_PATH:-missing})"
            echo "- $(mark "$GITLEAKS_PATH") Gitleaks SARIF (${GITLEAKS_PATH:-missing})"
            echo "- $(mark "$OSV_PATH") OSV results JSON (${OSV_PATH:-missing})"
            echo ""
            echo "Evidence is stored alongside the active task folder: '$TASK_FOLDER'."
          } > "$CHECKLIST_FILE"

          cat "$CHECKLIST_FILE" >> "$GITHUB_STEP_SUMMARY"

      - name: Upload security evidence checklist
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-evidence-checklist
          path: security-evidence-checklist.md
          retention-days: 30

  # Additional security checks from existing workflows
  security-prerequisites:
    name: Security Prerequisites Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Check for security scan prerequisites
        id: check_security_scan
        run: |
          if [ ! -d "scripts/security" ]; then
            echo "scripts/security directory does not exist. Skipping custom security scan."
            echo "scan_exists=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          if ! grep -q '"security:scan:errors"' package.json; then
            echo "security:scan:errors script not found in package.json. Skipping custom security scan."
            echo "scan_exists=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          echo "scan_exists=true" >> $GITHUB_OUTPUT

      - name: Run custom security scan
        if: steps.check_security_scan.outputs.scan_exists == 'true'
        working-directory: scripts/security
        run: pnpm security:scan:errors

      - name: Install Semgrep for custom rules
        run: pipx install semgrep==1.132.0

      - name: Setup Python for security validation
        uses: astral-sh/setup-uv@v3

      - name: Validate security fixes
        run: |
          uv run safety check --json || true

      - name: Upload Bandit JSON report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: bandit-report
          path: bandit-report.json
        continue-on-error: true
