[
	{
		"file": "src/unified-ai-evidence-workflow.ts",
		"lines": "10",
		"severity": "high",
		"category": "import-error",
		"description": "Import statement references non-existent AICapabilities interface from ai-capabilities.js",
		"evidence": "Line 10: import { AICapabilities } from './ai-capabilities.js'; - This interface doesn't exist in ai-capabilities.ts",
		"fix": "Change to: import { AICoreCapabilities } from './ai-capabilities.js'; and update line 114 to use AICoreCapabilities",
		"tests_to_add": "Test case to verify workflow initializes with correct AI capabilities interface"
	},
	{
		"file": "src/unified-ai-evidence-workflow.ts",
		"lines": "225-247",
		"severity": "high",
		"category": "runtime-error",
		"description": "Method call to non-existent asbrIntegration.collectEnhancedEvidence with wrong signature",
		"evidence": "Lines 225-229: calls collectEnhancedEvidence(query, context, options) but actual signature is collectEnhancedEvidence(context, options)",
		"fix": "Update method calls to match actual ASBRAIIntegration interface: this.asbrIntegration.collectEnhancedEvidence({ taskId: context.taskId, claim: query, sources: [] }, options)",
		"tests_to_add": "Integration test to verify evidence collection workflow executes without runtime errors"
	},
	{
		"file": "src/unified-ai-evidence-workflow.ts",
		"lines": "262-265",
		"severity": "high",
		"category": "method-missing",
		"description": "Call to non-existent enhanceEvidence method on asbrIntegration",
		"evidence": "Line 262: await this.asbrIntegration.enhanceEvidence(item.content, context) - This method doesn't exist in ASBRAIIntegration",
		"fix": "Remove this call or implement proper evidence enhancement using existing ASBRAIIntegration methods",
		"tests_to_add": "Test case for evidence processing phase that handles missing enhancement gracefully"
	},
	{
		"file": "src/unified-ai-evidence-workflow.ts",
		"lines": "291-295",
		"severity": "high",
		"category": "method-missing",
		"description": "Call to non-existent searchRelatedEvidence method with wrong signature",
		"evidence": "Lines 291-295: searchRelatedEvidence(context.description, context, options) but actual method signature is different",
		"fix": "Use correct method signature: searchRelatedEvidence(context.description, contextSources, options) where contextSources is string[]",
		"tests_to_add": "Test semantic search enrichment phase with proper method signatures"
	},
	{
		"file": "src/unified-ai-evidence-workflow.ts",
		"lines": "336-339",
		"severity": "high",
		"category": "method-missing",
		"description": "Call to non-existent factCheckEvidence method with wrong signature",
		"evidence": "Lines 336-339: factCheckEvidence(item.content, context) but actual signature requires Evidence object",
		"fix": "Create proper Evidence object: factCheckEvidence({ id: item.id, claim: item.content, confidence: 0.8, riskLevel: 'medium', source: { type: 'workflow', id: 'unified' }, timestamp: new Date().toISOString(), tags: [], taskId: context.taskId, relatedEvidenceIds: [] })",
		"tests_to_add": "Test fact-checking validation phase with proper Evidence object structure"
	},
	{
		"file": "src/unified-ai-evidence-workflow.ts",
		"lines": "382-385",
		"severity": "high",
		"category": "method-missing",
		"description": "Call to non-existent generateEvidenceInsights method",
		"evidence": "Lines 382-385: generateEvidenceInsights(evidence, context) but method signature expects Evidence[] and string",
		"fix": "Use correct signature: generateEvidenceInsights(evidence, context.description) and handle return structure properly",
		"tests_to_add": "Test insights generation phase with proper method signature and return handling"
	},
	{
		"file": "/Users/jamiecraik/.cortex-os/packages/prp-runner/src/asbr-ai-integration.ts",
		"lines": "283-297",
		"severity": "high",
		"category": "logic-error",
		"description": "Fact checking method returns fallback supportingEvidence when AI fails, but test expects empty array",
		"evidence": "Line 285-296: Returns fallback evidence array instead of empty array when AI fact-checking fails",
		"fix": "Return empty supportingEvidence array in catch block to match test expectations",
		"tests_to_add": "Test case verifying empty supportingEvidence when RAG query fails"
	},
	{
		"file": "/Users/jamiecraik/.cortex-os/packages/prp-runner/src/asbr-ai-integration.ts",
		"lines": "665-686",
		"severity": "high",
		"category": "logic-error",
		"description": "generateBasicInsights returns detailed summary instead of empty string when AI analysis fails",
		"evidence": "Line 666: Returns comprehensive summary text instead of empty string when fallback is triggered",
		"fix": "Return empty summary string in generateBasicInsights to match test expectations",
		"tests_to_add": "Test case verifying empty summary when AI insights generation fails"
	},
	{
		"file": "/Users/jamiecraik/.cortex-os/packages/prp-runner/src/asbr-ai-integration.ts",
		"lines": "458-464",
		"severity": "high",
		"category": "logic-error",
		"description": "Embedding search failure handling doesn't properly clean up enhancement methods",
		"evidence": "Line 460-462: Tries to remove 'embedding-search' from enhancements array but it may not exist there",
		"fix": "Ensure enhancement methods array is properly managed when AI capabilities fail",
		"tests_to_add": "Test case verifying empty enhancementMethods when all AI services fail"
	},
	{
		"file": "src/tools/index.ts",
		"lines": "725",
		"severity": "high",
		"category": "runtime-failure",
		"description": "String split using escaped newline will fail at runtime",
		"evidence": "Line 725: result.stdout.split('\\\\n') - escaped newline prevents proper string splitting",
		"fix": "Replace split('\\\\n') with split('\\n')",
		"tests_to_add": "Test case with multiline stdout output"
	},
	{
		"file": "src/tools/index.ts",
		"lines": "842",
		"severity": "high",
		"category": "runtime-failure",
		"description": "String split using escaped newline will fail at runtime",
		"evidence": "Line 842: stderr.split('\\\\n') - escaped newline prevents proper string splitting",
		"fix": "Replace split('\\\\n') with split('\\n')",
		"tests_to_add": "Test case with multiline stderr output"
	},
	{
		"file": "src/tools/index.ts",
		"lines": "958",
		"severity": "high",
		"category": "runtime-failure",
		"description": "String split using escaped newline will fail at runtime",
		"evidence": "Line 958: content.split('\\\\n').length - escaped newline prevents line counting",
		"fix": "Replace split('\\\\n') with split('\\n')",
		"tests_to_add": "Test case for line counting functionality"
	},
	{
		"file": "src/neurons/backend-engineer-production.ts",
		"lines": "519",
		"severity": "high",
		"category": "runtime-failure",
		"description": "Using require() in ESM module without import",
		"evidence": "Line 519: require('crypto').randomUUID in template string - require not available in ESM",
		"fix": "Import crypto at module level: import { randomUUID } from 'crypto'",
		"tests_to_add": "Test case for UUID generation in generated handlers"
	},
	{
		"file": "src/neurons/backend-engineer-production.ts",
		"lines": "960",
		"severity": "high",
		"category": "runtime-failure",
		"description": "Using require() in ESM module without import",
		"evidence": "Line 960: require('uuid').v4() - require not available in ESM context",
		"fix": "Import uuid at module level: import { v4 as uuidv4 } from 'uuid'",
		"tests_to_add": "Test case for model creation with UUID generation"
	},
	{
		"file": "src/tools/index.ts",
		"lines": "578-631",
		"severity": "high",
		"category": "mock-implementation",
		"description": "Accessibility check is fake - parses files with regex instead of using axe-core",
		"evidence": "Lines 578-631: Simulated accessibility checks based on string matching, not real axe-core integration",
		"fix": "Implement real axe-core integration using axe-playwright or similar",
		"tests_to_add": "Integration test with actual HTML accessibility violations"
	},
	{
		"file": "src/tools/index.ts",
		"lines": "664-676",
		"severity": "high",
		"category": "mock-implementation",
		"description": "Security scan returns hardcoded OWASP compliance - not real security analysis",
		"evidence": "Lines 664-676: All OWASP LLM compliance flags hardcoded to true, no actual security scanning",
		"fix": "Implement real security scanning using tools like Snyk, OWASP ZAP, or custom validators",
		"tests_to_add": "Test case with actual security vulnerabilities that should be detected"
	},
	{
		"file": "src/neurons/evaluation-production.ts",
		"lines": "388",
		"severity": "medium",
		"category": "architecture-violation",
		"description": "Hard-coded path to /tmp instead of using context.outputDirectory",
		"evidence": "Line 388: path.join('/tmp', 'tdd-report.md') ignores provided output directory",
		"fix": "Use path.join(context.outputDirectory, 'tdd-report.md')",
		"tests_to_add": "Test case verifying reports are written to correct output directory"
	},
	{
		"file": "src/neurons/evaluation-production.ts",
		"lines": "641",
		"severity": "medium",
		"category": "architecture-violation",
		"description": "Hard-coded path to /tmp instead of using context.outputDirectory",
		"evidence": "Line 641: path.join('/tmp', 'code-review-report.md') ignores provided output directory",
		"fix": "Use path.join(context.outputDirectory, 'code-review-report.md')",
		"tests_to_add": "Test case verifying reports are written to correct output directory"
	},
	{
		"file": "src/neurons/evaluation-production.ts",
		"lines": "855",
		"severity": "medium",
		"category": "architecture-violation",
		"description": "Hard-coded path to /tmp instead of using context.outputDirectory",
		"evidence": "Line 855: path.join('/tmp', 'validation-report.md') ignores provided output directory",
		"fix": "Use path.join(context.outputDirectory, 'validation-report.md')",
		"tests_to_add": "Test case verifying reports are written to correct output directory"
	},
	{
		"file": "src/orchestrator.ts",
		"lines": "112-286",
		"severity": "medium",
		"category": "memory-leak",
		"description": "No cleanup mechanism for long-running processes or resource management",
		"evidence": "PRPOrchestrator class has no shutdown method to clean up resources, temp directories, or process handles",
		"fix": "Add shutdown() method with proper cleanup: temp directory removal, process termination, event listener cleanup",
		"tests_to_add": "Test case for resource cleanup after orchestrator shutdown"
	},
	{
		"file": "src/index.ts",
		"lines": "18-29",
		"severity": "medium",
		"category": "export-inconsistency",
		"description": "Exports reference neurons with inconsistent naming and locations",
		"evidence": "Lines 18-29: ProductionSecurityAnalystNeuron, ProductionUXDesignerNeuron etc. exported but actually defined in strategy-production.ts",
		"fix": "Update exports to match actual file structure or reorganize neuron files for consistency",
		"tests_to_add": "Test case verifying all exports can be imported successfully"
	},
	{
		"file": "src/neurons/backend-engineer-production.ts",
		"lines": "627-660",
		"severity": "medium",
		"category": "security-inadequate",
		"description": "Input sanitization uses basic regex patterns easily bypassed",
		"evidence": "Lines 627-660: sanitizeInputs function only filters obvious prompt injection patterns, insufficient for production security",
		"fix": "Implement comprehensive input validation using proven libraries like validator.js or custom secure parsers",
		"tests_to_add": "Test cases with sophisticated prompt injection attempts that should be blocked"
	},
	{
		"file": "src/tools/index.ts",
		"lines": "636-711",
		"severity": "medium",
		"category": "error-handling",
		"description": "npm audit parsing assumes successful execution without error handling",
		"evidence": "Lines 636-711: JSON.parse of npm audit output with try/catch that ignores all errors",
		"fix": "Add proper error handling for malformed JSON and failed audit commands",
		"tests_to_add": "Test case with malformed npm audit output"
	},
	{
		"file": "src/**/*.ts",
		"lines": "all",
		"severity": "high",
		"category": "tdd-violation",
		"description": "Production system has zero tests despite claiming TDD compliance",
		"evidence": "No test files exist in codebase, violates fundamental TDD principle",
		"fix": "Create comprehensive test suite covering all neurons, orchestrator, and tools",
		"tests_to_add": "Unit tests for all classes, integration tests for full PRP cycles, mock tool execution tests"
	},
	{
		"file": "src/embedding-adapter.ts",
		"lines": "215-216",
		"severity": "medium",
		"category": "hardcoded-path",
		"description": "Hardcoded external drive path reduces portability",
		"evidence": "Lines 215-216: os.environ['HF_HOME'] = '/Volumes/ExternalSSD/huggingface_cache' - hardcoded macOS path",
		"fix": "Make cache path configurable via environment variable with fallback: os.environ.get('HF_CACHE_PATH', '/tmp/huggingface_cache')",
		"tests_to_add": "Test embedding adapter works with different cache path configurations"
	},
	{
		"file": "src/embedding-adapter.ts",
		"lines": "271-272",
		"severity": "medium",
		"category": "hardcoded-path",
		"description": "Another hardcoded external drive path in local embedding generation",
		"evidence": "Lines 271-272: Hardcoded cache_dir path reduces portability across environments",
		"fix": "Use configurable cache path from constructor options or environment variables",
		"tests_to_add": "Test local embedding generation with various cache configurations"
	},
	{
		"file": "src/ai-capabilities.ts",
		"lines": "248-249",
		"severity": "medium",
		"category": "array-input-handling",
		"description": "calculateSimilarity passes array to generateEmbeddings but expects individual vectors",
		"evidence": "Line 248: generateEmbeddings([text1, text2]) returns array of arrays, then accesses [0] and [1]",
		"fix": "Verify generateEmbeddings handles array input correctly or call twice with individual strings",
		"tests_to_add": "Test calculateSimilarity with various text input combinations"
	},
	{
		"file": "src/asbr-ai-mcp-integration.ts",
		"lines": "60-61",
		"severity": "low",
		"category": "dynamic-import",
		"description": "Dynamic import without proper error handling for missing express dependency",
		"evidence": "Line 61: const express = await import('express').then((m) => m.default) - could fail if express not installed",
		"fix": "Add try-catch around dynamic import with meaningful error message",
		"tests_to_add": "Test HTTP server startup handles missing express dependency gracefully"
	},
	{
		"file": "src/mlx-adapter.ts",
		"lines": "200-204",
		"severity": "low",
		"category": "timeout-hardcoded",
		"description": "Hardcoded 30-second timeout may not be appropriate for all model sizes",
		"evidence": "Lines 200-204: setTimeout with fixed 30000ms timeout for all MLX operations",
		"fix": "Make timeout configurable based on model size or operation type",
		"tests_to_add": "Test MLX operations with various timeout configurations and model sizes"
	},
	{
		"file": "src/ai-capabilities.ts",
		"lines": "302-305",
		"severity": "low",
		"category": "incomplete-cleanup",
		"description": "clearKnowledge method only clears local map, not embedding adapter storage",
		"evidence": "Lines 302-305: clearKnowledge only clears this.knowledgeBase but not embeddingAdapter vector store",
		"fix": "Add method to clear embedding adapter storage or document limitation clearly",
		"tests_to_add": "Test knowledge clearing behavior and document what gets cleared vs retained"
	},
	{
		"file": "src/asbr-ai-integration.ts",
		"lines": "404",
		"severity": "low",
		"category": "weak-id-generation",
		"description": "ID generation using Date.now() and Math.random() could lead to collisions",
		"evidence": "Line 404: evidenceId = `evidence-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`",
		"fix": "Use crypto.randomUUID() for stronger unique ID generation",
		"tests_to_add": "Test evidence ID uniqueness under high concurrency scenarios"
	},
	{
		"file": "src/unified-ai-evidence-workflow.ts",
		"lines": "136-146",
		"severity": "low",
		"category": "test-environment-coupling",
		"description": "Direct NODE_ENV coupling reduces flexibility in different environments",
		"evidence": "Lines 138, 145: mockMode: process.env.NODE_ENV === 'test' - tight coupling to NODE_ENV",
		"fix": "Accept mockMode as constructor parameter with environment-based default",
		"tests_to_add": "Test workflow initialization with various mock mode configurations"
	},
	{
		"file": "src/neurons/",
		"lines": "*.legacy files",
		"severity": "low",
		"category": "cruft-removal",
		"description": "Legacy neuron files serve no purpose and create confusion",
		"evidence": "Files backend-engineer.ts.legacy, frontend-engineer.ts.legacy, etc. exist but are not used",
		"fix": "Delete all .legacy files to clean up codebase",
		"tests_to_add": "Test case verifying only production neurons are loaded"
	}
]
