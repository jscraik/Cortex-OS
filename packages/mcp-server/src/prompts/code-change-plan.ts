/**
 * Code Change Plan Prompt
 *
 * Structured prompt for generating code change plans with
 * constraints, acceptance criteria, and resource links.
 */

import type { z } from 'zod';
import type { PromptHandlerResult } from '../types/mcp-2025.js';
import { BRAND } from '../utils/brand.js';
import { CodeChangePlanArgs } from './index.js';

const PLAN_SENTINEL = '</plan>';

type CodePlanArgs = z.infer<typeof CodeChangePlanArgs>;

function buildStructuredPlan(args: CodePlanArgs) {
	return {
		goal: args.goal,
		constraints: args.constraints,
		acceptance_criteria: args.acceptance_criteria,
		outline: [
			'Assess current architecture and identify affected modules',
			'Create feature flag or staged rollout strategy',
			'Implement changes with unit and integration coverage',
			'Run static analysis, Semgrep, and mutation tests',
			'Prepare rollout checklist and monitoring plan',
		],
		resources: [
			'repo://cortex-os/file?path=packages/mcp-server',
			'repo://cortex-os/file?path=tests',
			'memory://cortex-local/search?query=architecture+decisions',
		],
		metadata: {
			brand: BRAND.prefix,
			created_at: new Date().toISOString(),
			priority: 'high',
		},
	};
}

function renderList(items: string[], fallback: string): string {
	return items.length > 0
		? items.map((item, index) => `${index + 1}. ${item}`).join('\n')
		: fallback;
}

function renderBulletList(items: string[], fallback: string): string {
	return items.length > 0 ? items.map((item) => `- ${item}`).join('\n') : fallback;
}

function renderPlanText(plan: ReturnType<typeof buildStructuredPlan>): string {
	return `# ${BRAND.prefix} Code Change Plan

**Goal:** ${plan.goal}

## Constraints
${renderBulletList(plan.constraints, 'No explicit constraints provided.')}

## Acceptance Criteria
${renderBulletList(plan.acceptance_criteria, 'Define acceptance criteria with stakeholders.')}

## Implementation Outline
${renderList(plan.outline, 'Outline TBD during kickoff.')}

## Resources
- [Codebase](repo://cortex-os/file?path=packages/mcp-server)
- [Tests](repo://cortex-os/file?path=tests)
- [Architecture Decisions](memory://cortex-local/search?query=architecture+decisions)

---
*Generated by ${BRAND.prefix} Cortex Memory Server*
${PLAN_SENTINEL}`;
}

/**
 * Render code change plan prompt with structured output
 */
export function renderCodeChangePlan(input: unknown): PromptHandlerResult {
	const args = CodeChangePlanArgs.parse(input) satisfies CodePlanArgs;
	const plan = buildStructuredPlan(args);
	return {
		structuredContent: plan,
		text: renderPlanText(plan),
	};
}
