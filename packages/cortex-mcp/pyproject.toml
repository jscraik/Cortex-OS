[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "cortex-mcp"
version = "1.0.0"
description = "Model Context Protocol server for brAInwav Cortex-OS"
readme = "README.md"
license = { text = "Apache-2.0" }
authors = [{ name = "Cortex-OS Team", email = "team@cortex-os.ai" }]
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Intended Audience :: Information Technology",
  "License :: OSI Approved :: Apache Software License",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.12",
  "Framework :: FastAPI",
  "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
]
requires-python = ">=3.12"

# Runtime dependencies
dependencies = [
  "fastapi>=0.104.0",
  "uvicorn[standard]>=0.24.0",
  "httpx>=0.25.0",
  "fastmcp>=2.12.3",
  "pydantic>=2.5.0",
  "pydantic-settings>=2.1.0",
  "tenacity>=8.2.3",
  "prometheus-client>=0.19.0",
  "pyjwt>=2.8.0",
  "cryptography>=42.0.0",
]

[project.optional-dependencies]
# Development dependencies
dev = [
  "pytest>=7.4.3",
  "pytest-asyncio>=0.21.1",
  "pytest-cov>=4.1.0",
  "pytest-mock>=3.12.0",
  "pytest-benchmark>=4.0.0",
  "httpx>=0.25.0",           # For testing FastAPI
  "factory-boy>=3.3.0",      # Test data factories
  "freezegun>=1.2.2",        # Time mocking
]
# Local LLM support (for local model inference/testing)
local-llm = [
  "torch>=2.8.0",
  "llama-cpp-python>=0.2.90",
  "gguf>=0.1.0",
  "mlx>=0.29.0; sys_platform == 'darwin'",
  "mlx-lm>=0.27.0; sys_platform == 'darwin'",
]

# Security testing
security = ["bandit>=1.7.5", "safety>=2.3.5", "semgrep>=1.45.0"]

# Performance testing
performance = ["locust>=2.17.0", "memory-profiler>=0.61.0", "py-spy>=0.3.14"]

# Documentation
docs = [
  "mkdocs>=1.5.3",
  "mkdocs-material>=9.4.7",
  "mkdocstrings[python]>=0.24.0",
]

# All development dependencies
all = ["cortex-mcp[dev,security,performance,docs]"]


[project.scripts]
mcp-client = "cortex_mcp.http_client:main"
cortex-mcp = "cortex_mcp.http_client:main"

[project.urls]
Homepage = "https://github.com/cortex-os/cortex-mcp"
Repository = "https://github.com/cortex-os/cortex-mcp"
Documentation = "https://docs.cortex-os.ai/mcp"
Issues = "https://github.com/cortex-os/cortex-mcp/issues"

[tool.hatch.build]
include = ["src/cortex_mcp"]

[tool.hatch.build.targets.wheel]
packages = ["src/cortex_mcp"]

[tool.hatch.build.targets.sdist]
include = ["src/cortex_mcp", "README.md", "LICENSE", "pyproject.toml"]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
  "--strict-markers",
  "--strict-config",
  "--cov=cortex_mcp.http_client",
  "--cov=cortex_mcp.adapters",
  "--cov=cortex_mcp.auth.jwt_auth",
  "--cov=cortex_mcp.middleware.rate_limiter",
  "--cov=cortex_mcp.security.input_validation",
  "--cov=cortex_mcp.config",
  "--cov=cortex_mcp.monitoring.metrics",
  "--cov=cortex_mcp.resilience.circuit_breaker",
  "--cov-report=term-missing:skip-covered",
  "--cov-report=html:htmlcov",
  "--cov-report=xml",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
  "slow: marks tests as slow",
  "integration: marks tests as integration tests",
  "security: marks tests as security tests",
  "performance: marks tests as performance tests",
  "unit: marks tests as unit tests",
  "asyncio: marks async tests",
  "contract: marks live service contract tests",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["cortex_mcp"]
omit = ["*/tests/*", "*/examples/*", "*/migrations/*", "*/__pycache__/*"]
branch = true

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = true
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "raise AssertionError",
  "raise NotImplementedError",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]

[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
  "celery.*",
  "redis.*",
  "neo4j.*",
  "qdrant_client.*",
  "prometheus_client.*",
  "jsonrpclib.*",
  "httpx",
]
ignore_missing_imports = true

[tool.ruff]
target-version = "py313"
line-length = 88

[tool.ruff.lint]
select = [
  "E",   # pycodestyle errors
  "W",   # pycodestyle warnings
  "F",   # pyflakes
  "I",   # isort
  "B",   # flake8-bugbear
  "C4",  # flake8-comprehensions
  "UP",  # pyupgrade
  "ARG", # flake8-unused-arguments
  "SIM", # flake8-simplify
]
ignore = [
  "E501", # line too long, handled by black
  "B008", # do not perform function calls in argument defaults
  "C901", # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["ARG", "S101", "SLF001"]

[tool.bandit]
exclude_dirs = ["tests"]
skips = ["B101", "B601"]

[tool.black]
target-version = ['py313']
line-length = 88
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.hatch.metadata]
allow-direct-references = true
